Index: xl2tpd-1.3.14/avp.c
===================================================================
--- xl2tpd-1.3.14.orig/avp.c	2019-04-18 00:23:39.000000000 +0800
+++ xl2tpd-1.3.14/avp.c	2021-07-19 16:45:44.397497100 +0800
@@ -146,7 +146,7 @@
     c->msgtype = ntohs (raw[3].s);
     if (datalen != 8)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG, "%s: wrong size (%d != 8)\n", __FUNCTION__,
                  datalen);
         wrong_length (c, "Message Type", 8, datalen, 0);
@@ -154,13 +154,13 @@
     }
     if ((c->msgtype > MAX_MSG) || (!msgtypes[c->msgtype]))
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG, "%s: unknown message type %d\n", __FUNCTION__,
                  c->msgtype);
         return -EINVAL;
     }
     if (gconfig.debug_avp)
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG, "%s: message type %d (%s)\n", __FUNCTION__,
                  c->msgtype, msgtypes[c->msgtype]);
 #ifdef SANITY
@@ -172,7 +172,7 @@
          */
         if ((c != t->self) && (c->msgtype < Hello))
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: attempting to negotiate tunnel inside a call!\n",
                      __FUNCTION__);
@@ -189,7 +189,7 @@
                  * to see if we've both requested tunnels
                  */
 
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate SCCRQ with state != 0\n",
                          __FUNCTION__);
@@ -199,7 +199,7 @@
         case SCCRP:
             if (t->state != SCCRQ)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate SCCRP with state != SCCRQ!\n",
                          __FUNCTION__);
@@ -209,7 +209,7 @@
         case SCCCN:
             if (t->state != SCCRP)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate SCCCN with state != SCCRP!\n",
                          __FUNCTION__);
@@ -219,7 +219,7 @@
         case ICRQ:
             if (t->state != SCCCN)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate ICRQ when state != SCCCN\n",
                          __FUNCTION__);
@@ -227,7 +227,7 @@
             }
             if (c != t->self)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate ICRQ on a call!\n",
                          __FUNCTION__);
@@ -237,7 +237,7 @@
         case ICRP:
             if (t->state != SCCCN)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate ICRP on tunnel!=SCCCN\n",
                          __FUNCTION__);
@@ -245,7 +245,7 @@
             }
             if (c->state != ICRQ)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate ICRP when state != ICRQ\n",
                          __FUNCTION__);
@@ -255,7 +255,7 @@
         case ICCN:
             if (c->state != ICRP)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate ICCN when state != ICRP\n",
                          __FUNCTION__);
@@ -265,7 +265,7 @@
         case SLI:
             if (c->state != ICCN)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate SLI when state != ICCN\n",
                          __FUNCTION__);
@@ -275,7 +275,7 @@
         case OCRP:             /* jz: case for ORCP */
             if (t->state != SCCCN)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate OCRP on tunnel!=SCCCN\n",
                          __FUNCTION__);
@@ -283,7 +283,7 @@
             }
             if (c->state != OCRQ)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate OCRP when state != OCRQ\n",
                          __FUNCTION__);
@@ -294,7 +294,7 @@
 
             if (c->state != OCRQ)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: attempting to negotiate OCCN when state != OCRQ\n",
                          __FUNCTION__);
@@ -317,7 +317,7 @@
         struct call *tmp;
         if (gconfig.debug_avp)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG, "%s: new incoming call\n", __FUNCTION__);
         }
         tmp = new_call (t);
@@ -351,7 +351,7 @@
     {
         if (size < 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG, "%s: Random vector too small (%d < 0)\n",
                      __FUNCTION__, size);
             wrong_length (c, "Random Vector", 6, datalen, 1);
@@ -359,7 +359,7 @@
         }
         if (size > MAX_VECTOR_SIZE)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG, "%s: Random vector too large (%d > %d)\n",
                      __FUNCTION__, datalen, MAX_VECTOR_SIZE);
             wrong_length (c, "Random Vector", 6, datalen, 1);
@@ -392,7 +392,7 @@
     UNUSED(datalen);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG, "%s : Ignoring AVP\n", __FUNCTION__);
     }
     return 0;
@@ -406,7 +406,7 @@
     {
         if (datalen != 6)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is incorrect size.  %d != 6\n", __FUNCTION__,
                      datalen);
@@ -418,7 +418,7 @@
         case ICCN:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: sequencing required not appropriate for %s!\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -428,7 +428,7 @@
 #endif
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG, "%s: peer requires sequencing.\n", __FUNCTION__);
     }
     c->seq_reqd = -1;
@@ -451,7 +451,7 @@
     {
         if (datalen < 8)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is incorrect size.  %d < 8\n", __FUNCTION__,
                      datalen);
@@ -464,7 +464,7 @@
         case StopCCN:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: result code not appropriate for %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -480,7 +480,7 @@
     */
     if (((result & 0xFF) == 0) && (result >> 8 != 0))
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: result code endianness fix for buggy Apple client. network=%d, le=%d\n",
                  __FUNCTION__, result, result >> 8);
@@ -489,7 +489,7 @@
 
     if ((c->msgtype == StopCCN) && ((result > 7) || (result < 1)))
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: result code out of range (%d %d %d).  Ignoring.\n",
                  __FUNCTION__, result, error, datalen);
@@ -498,7 +498,7 @@
 
     if ((c->msgtype == CDN) && ((result > 11) || (result < 1)))
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: result code out of range (%d %d %d).  Ignoring.\n",
                  __FUNCTION__, result, error, datalen);
@@ -509,7 +509,7 @@
         error = ntohs (raw[4].s);
         if (((error & 0xFF) == 0) && (error >> 8 != 0))
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: error code endianness fix for buggy Apple client. network=%d, le=%d\n",
                      __FUNCTION__, error, error >> 8);
@@ -525,7 +525,7 @@
         c->errormsg[0] = 0;
     if (gconfig.debug_avp)
     {
-        if (DEBUG && (c->msgtype == StopCCN))
+        if (gconfig.debug && (c->msgtype == StopCCN))
         {
             l2tp_log (LOG_DEBUG,
                  "%s: peer closing for reason %d (%s), error = %d (%s)\n",
@@ -558,7 +558,7 @@
     {
         if (datalen != 8)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is incorrect size.  %d != 8\n", __FUNCTION__,
                      datalen);
@@ -571,7 +571,7 @@
         case SCCRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: protocol version not appropriate for %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -582,7 +582,7 @@
     ver = ntohs (raw[3].s);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer is using version %d, revision %d.\n", __FUNCTION__,
                  (ver >> 8), ver & 0xFF);
@@ -610,7 +610,7 @@
         case SCCRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: framing capabilities not appropriate for %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -618,7 +618,7 @@
         }
         if (datalen != 10)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is incorrect size.  %d != 10\n", __FUNCTION__,
                      datalen);
@@ -629,7 +629,7 @@
 #endif
     caps = ntohs (raw[4].s);
     if (gconfig.debug_avp)
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: supported peer frames:%s%s\n", __FUNCTION__,
                  caps & ASYNC_FRAMING ? " async" : "",
@@ -656,7 +656,7 @@
         case SCCRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: bearer capabilities not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -664,7 +664,7 @@
         }
         if (datalen != 10)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is incorrect size.  %d != 10\n", __FUNCTION__,
                      datalen);
@@ -676,7 +676,7 @@
     caps = ntohs (raw[4].s);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
         {
             l2tp_log (LOG_DEBUG,
                  "%s: supported peer bearers:%s%s\n",
@@ -711,7 +711,7 @@
         case SCCRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: firmware revision not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -719,7 +719,7 @@
         }
         if (datalen != 8)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is incorrect size.  %d != 8\n", __FUNCTION__,
                      datalen);
@@ -731,7 +731,7 @@
     ver = ntohs (raw[3].s);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer reports firmware version %d (0x%.4x)\n",
                  __FUNCTION__, ver, ver);
@@ -758,7 +758,7 @@
         case OCRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: bearer type not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -766,7 +766,7 @@
         }
         if (datalen != 10)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is incorrect size.  %d != 10\n", __FUNCTION__,
                      datalen);
@@ -778,7 +778,7 @@
     b = ntohs (raw[4].s);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer bears:%s\n", __FUNCTION__,
                  b & ANALOG_BEARER ? " analog" : "digital");
@@ -805,7 +805,7 @@
         case OCCN:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: frame type not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -813,7 +813,7 @@
         }
         if (datalen != 10)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is incorrect size.  %d != 10\n", __FUNCTION__,
                      datalen);
@@ -825,7 +825,7 @@
     b = ntohs (raw[4].s);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer uses:%s frames\n", __FUNCTION__,
                  b & ASYNC_FRAMING ? " async" : "sync");
@@ -851,7 +851,7 @@
         case SCCRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: hostname not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -859,7 +859,7 @@
         }
         if (datalen < 6)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is too small.  %d < 6\n", __FUNCTION__,
                      datalen);
@@ -872,7 +872,7 @@
     size -= sizeof (struct avp_hdr);
     if (size > MAXSTRLEN - 1)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG, "%s: truncating reported hostname (size is %d)\n",
                  __FUNCTION__, size);
         size = MAXSTRLEN - 1;
@@ -880,7 +880,7 @@
     safe_copy (t->hostname, (char *) &raw[3].s, size);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer reports hostname '%s'\n", __FUNCTION__,
                  t->hostname);
@@ -905,7 +905,7 @@
         case ICRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: dialing number not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -913,7 +913,7 @@
         }
         if (datalen < 6)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is too small.  %d < 6\n", __FUNCTION__,
                      datalen);
@@ -926,7 +926,7 @@
     size -= sizeof (struct avp_hdr);
     if (size > MAXSTRLEN - 1)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: truncating reported dialing number (size is %d)\n",
                  __FUNCTION__, size);
@@ -935,7 +935,7 @@
     safe_copy (t->call_head->dialing, (char *) &raw[3].s, size);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer reports dialing number '%s'\n", __FUNCTION__,
                  t->call_head->dialing);
@@ -961,7 +961,7 @@
         case ICRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: dialed number not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -969,7 +969,7 @@
         }
         if (datalen < 6)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is too small.  %d < 6\n", __FUNCTION__,
                      datalen);
@@ -982,7 +982,7 @@
     size -= sizeof (struct avp_hdr);
     if (size > MAXSTRLEN - 1)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: truncating reported dialed number (size is %d)\n",
                  __FUNCTION__, size);
@@ -991,7 +991,7 @@
     safe_copy (t->call_head->dialed, (char *) &raw[3].s, size);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer reports dialed number '%s'\n", __FUNCTION__,
                  t->call_head->dialed);
@@ -1017,7 +1017,7 @@
         case ICRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: sub_address not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1025,7 +1025,7 @@
         }
         if (datalen < 6)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is too small.  %d < 6\n", __FUNCTION__,
                      datalen);
@@ -1038,7 +1038,7 @@
     size -= sizeof (struct avp_hdr);
     if (size > MAXSTRLEN - 1)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: truncating reported sub address (size is %d)\n",
                  __FUNCTION__, size);
@@ -1047,7 +1047,7 @@
     safe_copy (t->call_head->subaddy, (char *) &raw[3].s, size);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer reports subaddress '%s'\n", __FUNCTION__,
                  t->call_head->subaddy);
@@ -1072,7 +1072,7 @@
         case SCCRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: vendor not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1080,7 +1080,7 @@
         }
         if (datalen < 6)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is too small.  %d < 6\n", __FUNCTION__,
                      datalen);
@@ -1093,7 +1093,7 @@
     size -= sizeof (struct avp_hdr);
     if (size > MAXSTRLEN - 1)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG, "%s: truncating reported vendor (size is %d)\n",
                  __FUNCTION__, size);
         size = MAXSTRLEN - 1;
@@ -1101,7 +1101,7 @@
     safe_copy (t->vendor, (char *) &raw[3].s, size);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer reports vendor '%s'\n", __FUNCTION__, t->vendor);
     }
@@ -1124,7 +1124,7 @@
         case SCCRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: challenge not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1132,7 +1132,7 @@
         }
         if (datalen < 6)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is too small.  %d < 6\n", __FUNCTION__,
                      datalen);
@@ -1184,7 +1184,7 @@
         case SCCCN:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: challenge response not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1192,7 +1192,7 @@
         }
         if (datalen < 6)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is too small.  %d < 6\n", __FUNCTION__,
                      datalen);
@@ -1236,7 +1236,7 @@
         case StopCCN:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: tunnel ID not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1244,7 +1244,7 @@
         }
         if (datalen != 8)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is wrong size.  %d != 8\n", __FUNCTION__,
                      datalen);
@@ -1263,7 +1263,7 @@
     }
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: using peer's tunnel %d\n", __FUNCTION__,
                  ntohs (raw[3].s));
@@ -1291,7 +1291,7 @@
             break;
         case OCRQ:
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: call ID not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1299,7 +1299,7 @@
         }
         if (datalen != 8)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is wrong size.  %d != 8\n", __FUNCTION__,
                      datalen);
@@ -1331,7 +1331,7 @@
     }
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: using peer's call %d\n", __FUNCTION__, ntohs (raw[3].s));
     }
@@ -1358,7 +1358,7 @@
         case OCCN:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: packet delay not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1366,7 +1366,7 @@
         }
         if (datalen != 8)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is wrong size.  %d != 8\n", __FUNCTION__,
                      datalen);
@@ -1378,7 +1378,7 @@
     c->ppd = ntohs (raw[3].s);
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer's delay is %d 1/10's of a second\n", __FUNCTION__,
                  ntohs (raw[3].s));
@@ -1402,7 +1402,7 @@
         case OCRQ:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: call ID not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1411,7 +1411,7 @@
         if (datalen != 10)
         {
 #ifdef STRICT
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is wrong size.  %d != 10\n", __FUNCTION__,
                      datalen);
@@ -1430,7 +1430,7 @@
         ((unsigned int) ntohs (raw[4].s));
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: serial number is %d\n", __FUNCTION__,
                  t->call_head->serno);
@@ -1455,7 +1455,7 @@
         case OCRP:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: rx connect speed not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1463,7 +1463,7 @@
         }
         if (datalen != 10)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is wrong size.  %d != 10\n", __FUNCTION__,
                      datalen);
@@ -1476,7 +1476,7 @@
         ((unsigned int) ntohs (raw[4].s));
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: receive baud rate is %d\n", __FUNCTION__, c->rxspeed);
     }
@@ -1500,7 +1500,7 @@
         case OCRP:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: tx connect speed not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1508,7 +1508,7 @@
         }
         if (datalen != 10)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is wrong size.  %d != 10\n", __FUNCTION__,
                      datalen);
@@ -1521,7 +1521,7 @@
         ((unsigned int) ntohs (raw[4].s));
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: transmit baud rate is %d\n", __FUNCTION__, c->txspeed);
     }
@@ -1546,7 +1546,7 @@
         case OCCN:
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: physical channel not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1554,7 +1554,7 @@
         }
         if (datalen != 10)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is wrong size.  %d != 10\n", __FUNCTION__,
                      datalen);
@@ -1567,7 +1567,7 @@
         ((unsigned int) ntohs (raw[4].s));
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: physical channel is %d\n", __FUNCTION__,
                  t->call_head->physchan);
@@ -1597,7 +1597,7 @@
 		case ICCN: */
             break;
         default:
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: RWS not appropriate for message %s.  Ignoring.\n",
                      __FUNCTION__, msgtypes[c->msgtype]);
@@ -1605,7 +1605,7 @@
         }
         if (datalen != 8)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: avp is wrong size.  %d != 8\n", __FUNCTION__,
                      datalen);
@@ -1619,7 +1619,7 @@
 		c->fbit = FBIT; */
     if (gconfig.debug_avp)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: peer wants RWS of %d.  Will use flow control.\n",
                  __FUNCTION__, t->rws);
@@ -1670,7 +1670,7 @@
             }
             else
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_WARNING,
                          "%s:  don't know how to handle attribute %d.\n",
                          __FUNCTION__, avp->attr);
@@ -1717,7 +1717,8 @@
         if (AHBIT (avp->length))
         {
 #ifdef DEBUG_HIDDEN
-            l2tp_log (LOG_DEBUG, "%s: Hidden bit set on AVP.\n", __FUNCTION__);
+			if(gconfig.debug)
+				l2tp_log (LOG_DEBUG, "%s: Hidden bit set on AVP.\n", __FUNCTION__);
 #endif
             /* We want to rewrite the AVP as an unhidden AVP
                and then pass it along as normal.  Remember how
@@ -1760,7 +1761,7 @@
             }
             else
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_WARNING, "%s:  no handler for attribute %d (%s).\n",
                          __FUNCTION__, avp->attr,
                          avps[avp->attr].description);
@@ -1781,7 +1782,7 @@
             }
             else
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: Bad exit status handling attribute %d (%s).\n",
                          __FUNCTION__, avp->attr,
Index: xl2tpd-1.3.14/control.c
===================================================================
--- xl2tpd-1.3.14.orig/control.c	2019-04-18 00:23:39.000000000 +0800
+++ xl2tpd-1.3.14/control.c	2021-07-19 16:47:13.464497100 +0800
@@ -133,15 +133,17 @@
     if (gconfig.packet_dump)
         do_packet_dump (buf);
 #ifdef DEBUG_HELLO
-    l2tp_log (LOG_DEBUG, "%s: sending Hello on %d\n", __FUNCTION__, t->ourtid);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: sending Hello on %d\n", __FUNCTION__, t->ourtid);
 #endif
     control_xmit (buf);
     /*
      * Schedule another Hello in a little bit.
      */
 #ifdef DEBUG_HELLO
-    l2tp_log (LOG_DEBUG, "%s: scheduling another Hello on %d\n", __FUNCTION__,
-         t->ourtid);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: scheduling another Hello on %d\n", __FUNCTION__,
+			t->ourtid);
 #endif
     t->hello = schedule (tv, hello, (void *) t);
 }
@@ -152,8 +154,9 @@
     add_control_hdr (t, c, buf);
     t->control_seq_num--;
 #ifdef DEBUG_ZLB
-    l2tp_log (LOG_DEBUG, "%s: sending control ZLB on tunnel %d\n", __FUNCTION__,
-         t->tid);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: sending control ZLB on tunnel %d\n", __FUNCTION__,
+			t->tid);
 #endif
     udp_xmit (buf, t);
 }
@@ -381,7 +384,7 @@
          */
         if (t->tid <= 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer did not specify assigned tunnel ID.  Closing.\n",
                      __FUNCTION__);
@@ -391,7 +394,7 @@
         }
         if (!(t->lns = get_lns (t)))
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Denied connection to unauthorized peer %s\n",
                      __FUNCTION__, IPADDY (t->peer.sin_addr));
@@ -403,7 +406,7 @@
         t->hbit = t->lns->hbit;
         if (t->fc < 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer did not specify framing capability.  Closing.\n",
                      __FUNCTION__);
@@ -417,7 +420,7 @@
          * We shouldn't be requiring a bearer capabilities AVP to be present in
          * SCCRQ and SCCRP as they aren't required
          if (t->bc < 0 ) {
-         if (DEBUG) l2tp_log(LOG_DEBUG,
+         if (gconfig.debug) l2tp_log(LOG_DEBUG,
          "%s: Peer did not specify bearer capability.  Closing.\n",__FUNCTION__);
          set_error(c, VENDOR_ERROR, "Specify bearer capability");
          c->needclose = -1;
@@ -425,7 +428,7 @@
          }  */
         if ((!strlen (t->hostname)) && ((t->chal_us.state) || ((t->lns->challenge))))
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer did not specify hostname.  Closing.\n",
                      __FUNCTION__);
@@ -527,7 +530,7 @@
          */
         if (t->fc < 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer did not specify framing capability.  Closing.\n",
                      __FUNCTION__);
@@ -541,7 +544,7 @@
          * We shouldn't be requiring a bearer capabilities AVP to be present in
          * SCCRQ and SCCRP as they aren't required
          if (t->bc < 0 ) {
-         if (DEBUG) log(LOG_DEBUG,
+         if (gconfig.debug) log(LOG_DEBUG,
          "%s: Peer did not specify bearer capability.  Closing.\n",__FUNCTION__);
          set_error(c, VENDOR_ERROR, "Specify bearer capability");
          c->needclose = -1;
@@ -549,7 +552,7 @@
          } */
         if ((!strlen (t->hostname)) && ((t->chal_them.state) || ((t->chal_us.state))))
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer did not specify hostname.  Closing.\n",
                      __FUNCTION__);
@@ -559,7 +562,7 @@
         }
         if (t->tid <= 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer did not specify assigned tunnel ID.  Closing.\n",
                      __FUNCTION__);
@@ -627,8 +630,9 @@
         tv.tv_sec = HELLO_DELAY;
         tv.tv_usec = 0;
 #ifdef DEBUG_HELLO
-        l2tp_log (LOG_DEBUG, "%s: scheduling initial HELLO on %d\n", __FUNCTION__,
-             t->ourtid);
+		if (gconfig.debug)
+			l2tp_log (LOG_DEBUG, "%s: scheduling initial HELLO on %d\n", __FUNCTION__,
+				t->ourtid);
 #endif
         t->hello = schedule (tv, hello, (void *) t);
         l2tp_log (LOG_NOTICE,
@@ -672,15 +676,16 @@
         tv.tv_sec = HELLO_DELAY;
         tv.tv_usec = 0;
 #ifdef DEBUG_HELLO
-        l2tp_log (LOG_DEBUG, "%s: scheduling initial HELLO on %d\n", __FUNCTION__,
-             t->ourtid);
+		if (gconfig.debug)
+			l2tp_log (LOG_DEBUG, "%s: scheduling initial HELLO on %d\n", __FUNCTION__,
+				t->ourtid);
 #endif
         t->hello = schedule (tv, hello, (void *) t);
         break;
     case StopCCN:
         if (t->qtid < 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer tried to disconnect without specifying tunnel ID\n",
                      __FUNCTION__);
@@ -694,7 +699,7 @@
             tmptid = t->tid;
         if ((t->qtid != tmptid) && (tmptid > 0))
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer [Vendor:%s] [Firmware:%d (0x%.4x)] tried to disconnect with invalid TID (%d != %d)\n",
                      __FUNCTION__, t->vendor, t->firmware, t->firmware, t->qtid, tmptid);
@@ -705,7 +710,7 @@
             t->tid = t->qtid;
         if (t->self->result < 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer tried to disconnect without specifying result code.\n",
                      __FUNCTION__);
@@ -731,7 +736,7 @@
 		if (p->ourrws > -1) p->ourfbit = FBIT; else p->ourfbit = 0; */
         if (p->cid < 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer tried to initiate call without call ID\n",
                      __FUNCTION__);
@@ -763,7 +768,7 @@
          * isn't a big deal, but it would be nice to have *some* sort of check
          * for it and perhaps just log it and go on.  */
 /*    JLM	if (p->serno<1) {
-			if (DEBUG) log(LOG_DEBUG,
+			if (gconfig.debug) log(LOG_DEBUG,
 			"%s: Peer did not specify serial number when initiating call\n", __FUNCTION__);
 			call_close(p);
 			return -EINVAL;
@@ -817,7 +822,7 @@
     case ICRP:
         if (c->cid < 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer tried to negotiate ICRP without specifying call ID\n",
                      __FUNCTION__);
@@ -1100,7 +1105,7 @@
     case CDN:
         if (c->qcid < 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer tried to disconnect without specifying call ID\n",
                      __FUNCTION__);
@@ -1113,7 +1118,7 @@
                 p = p->next;
             if (!p)
             {
-                if (DEBUG)
+                if (gconfig.debug)
                     l2tp_log (LOG_DEBUG,
                          "%s: Unable to determine call to be disconnected.\n",
                          __FUNCTION__);
@@ -1132,7 +1137,7 @@
 
         if ((c->qcid != tmpcid) && tmpcid > 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer tried to disconnect with invalid CID (%d != %d)\n",
                      __FUNCTION__, c->qcid, c->ourcid);
@@ -1141,7 +1146,7 @@
         c->qcid = -1;
         if (c->result < 0)
         {
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Peer tried to disconnect without specifying result code.\n",
                      __FUNCTION__);
@@ -1177,7 +1182,7 @@
     struct buffer *zlb;
     if (buf->len < sizeof (struct control_hdr))
     {
-        if (DEBUG)
+        if (gconfig.debug)
         {
             l2tp_log (LOG_DEBUG,
                  "%s: Received too small of packet\n", __FUNCTION__);
@@ -1187,7 +1192,7 @@
 #ifdef SANITY
     if (buf->len != h->length)
     {
-        if (DEBUG)
+        if (gconfig.debug)
         {
             l2tp_log (LOG_DEBUG,
                  "%s: Reported and actual sizes differ (%d != %d)\n",
@@ -1199,12 +1204,13 @@
      * FIXME: H-bit handling goes here
      */
 #ifdef DEBUG_CONTROL
-    l2tp_log (LOG_DEBUG, "%s: control, cid = %d, Ns = %d, Nr = %d\n", __FUNCTION__,
-         c->cid, h->Ns, h->Nr);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: control, cid = %d, Ns = %d, Nr = %d\n", __FUNCTION__,
+			c->cid, h->Ns, h->Nr);
 #endif
     if (h->Ns != t->control_rec_seq_num)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG,
                  "%s: Received out of order control packet on tunnel %d (got %d, expected %d)\n",
                  __FUNCTION__, t->tid, h->Ns, t->control_rec_seq_num);
@@ -1219,7 +1225,7 @@
                * for sure that we already have it.
              */
 #ifdef DEBUG_ZLB
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG, "%s: Sending an updated ZLB in reponse\n",
                      __FUNCTION__);
 #endif
@@ -1256,7 +1262,7 @@
     {
         if (!CTBIT (h->ver))
         {
-            if (DEBUG)
+            if (gconfig.debug)
             {
                 l2tp_log (LOG_DEBUG, "%s: Control bit not set\n", __FUNCTION__);
             }
@@ -1264,7 +1270,7 @@
         }
         if (!CLBIT (h->ver))
         {
-            if (DEBUG)
+            if (gconfig.debug)
             {
                 l2tp_log (LOG_DEBUG, "%s: Length bit not set\n", __FUNCTION__);
             }
@@ -1272,7 +1278,7 @@
         }
         if (!CFBIT (h->ver))
         {
-            if (DEBUG)
+            if (gconfig.debug)
             {
                 l2tp_log (LOG_DEBUG, "%s: Flow bit not set\n", __FUNCTION__);
             }
@@ -1280,7 +1286,7 @@
         }
         if (CVER (h->ver) != VER_L2TP)
         {
-            if (DEBUG)
+            if (gconfig.debug)
             {
                 if (CVER (h->ver) == VER_PPTP)
                 {
@@ -1318,7 +1324,7 @@
     struct payload_hdr *h = (struct payload_hdr *) (buf->start);
     if (!c)
     {
-        if (DEBUG)
+        if (gconfig.debug)
         {
             l2tp_log (LOG_DEBUG, "%s: Attempted to send payload on tunnel\n",
                  __FUNCTION__);
@@ -1329,7 +1335,7 @@
     {
         /* has to be at least MIN_PAYLOAD_HDR_LEN
            no matter what.  we'll look more later */
-        if (DEBUG)
+        if (gconfig.debug)
         {
             l2tp_log (LOG_DEBUG, "%s:Received to small of packet\n", __FUNCTION__);
         }
@@ -1340,7 +1346,7 @@
     {
         if (PTBIT (h->ver))
         {
-            if (DEBUG)
+            if (gconfig.debug)
             {
                 l2tp_log (LOG_DEBUG, "%s Control bit set\n", __FUNCTION__);
             }
@@ -1351,7 +1357,7 @@
         if (PFBIT (h->ver))
         {
 /*			if (!c->fbit && !c->ourfbit) {
-				if (DEBUG)
+				if (gconfig.debug)
 					l2tp_log(LOG_DEBUG,"%s: flow bit set, but no RWS negotiated.\n",__FUNCTION__);
 				return -EINVAL;
 			} */
@@ -1359,7 +1365,7 @@
         }
 /*		if (!PFBIT(h->ver)) {
 			if (c->fbit || c->ourfbit) {
-				if (DEBUG)
+				if (gconfig.debug)
 					l2tp_log(LOG_DEBUG, "%s: no flow bit, but RWS was negotiated.\n",__FUNCTION__);
 				return -EINVAL;;
 			}
@@ -1370,7 +1376,7 @@
             ehlen += h->length; /* include length if available */
         if (PVER (h->ver) != VER_L2TP)
         {
-            if (DEBUG)
+            if (gconfig.debug)
             {
                 if (PVER (h->ver) == VER_PPTP)
                 {
@@ -1392,7 +1398,7 @@
         }
         if ((buf->len < ehlen) && !PLBIT (h->ver))
         {
-            if (DEBUG)
+            if (gconfig.debug)
             {
                 l2tp_log (LOG_DEBUG, "%s payload too small (%d < %d)\n",
                      __FUNCTION__, buf->len, ehlen);
@@ -1401,7 +1407,7 @@
         }
         if ((buf->len != h->length) && PLBIT (h->ver))
         {
-            if (DEBUG)
+            if (gconfig.debug)
             {
                 l2tp_log (LOG_DEBUG, "%s: size mismatch (%d != %d)\n",
                      __FUNCTION__, buf->len, h->length);
@@ -1503,8 +1509,9 @@
 		c->pSr=new_hdr->Ns;
 	} */
 #ifdef DEBUG_PAYLOAD
-    l2tp_log (LOG_DEBUG, "%s: payload, cid = %d, Ns = %d, Nr = %d\n", __FUNCTION__,
-         c->cid, new_hdr->Ns, new_hdr->Nr);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: payload, cid = %d, Ns = %d, Nr = %d\n", __FUNCTION__,
+			c->cid, new_hdr->Ns, new_hdr->Nr);
 #endif
     if (new_hdr->Ns != c->data_seq_num)
     {
@@ -1515,7 +1522,7 @@
             ((c->data_rec_seq_num - new_hdr->Ns) > 32768)))
         {
 #ifdef DEBUG_FLOW
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Already seen this packet before (%d)\n",
                      __FUNCTION__, new_hdr->Ns);
@@ -1526,7 +1533,7 @@
         {
             /* FIXME: I should buffer for out of order packets */
 #ifdef DEBUG_FLOW
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Oops, lost a packet or two (%d).  continuing...\n",
                      __FUNCTION__, new_hdr->Ns);
@@ -1536,7 +1543,7 @@
         else
         {
 #ifdef DEBUG_FLOW
-            if (DEBUG)
+            if (gconfig.debug)
                 l2tp_log (LOG_DEBUG,
                      "%s: Received out of order payload packet (%d)\n",
                      __FUNCTION__, new_hdr->Ns);
@@ -1587,7 +1594,8 @@
     c->data_seq_num--;                   /* We don't increment on ZLB's */
     c->zlb_xmit = NULL;
 #ifdef DEBUG_ZLB
-    l2tp_log (LOG_DEBUG, "%s: sending payload ZLB\n", __FUNCTION__);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: sending payload ZLB\n", __FUNCTION__);
 #endif
     udp_xmit (buf, t);
     toss (buf);
@@ -1608,7 +1616,7 @@
 
     if (c->fd < 0)
     {
-        if (DEBUG)
+        if (gconfig.debug)
             l2tp_log (LOG_DEBUG, "%s: tty is not open yet.\n", __FUNCTION__);
         return -EIO;
     }
@@ -1680,7 +1688,7 @@
         // we must at least still have 3 bytes left in the worst case scenario:
         // 1 for a possible escape, 1 for the value and 1 to end the PPP stream.
         if((size_t)pos >= (sizeof(wbuf) - 4)) {
-            if(DEBUG)
+            if(gconfig.debug)
                 l2tp_log(LOG_CRIT, "%s: rx packet is too big after PPP encoding (size %u, max is %u)\n",
                                 __FUNCTION__, buf->len, MAX_RECV_SIZE);
             return -EINVAL;
@@ -1698,7 +1706,7 @@
     wbuf[pos++] = PPP_FLAG;
 
 #if 0
-    if(DEBUG) {
+    if(gconfig.debug) {
       l2tp_log(LOG_DEBUG, "after sync->async, expanded %d->%d\n",
 	       buf->len, pos);
     }
@@ -1787,7 +1795,8 @@
     if (buf->len == sizeof (struct control_hdr))
     {
     #ifdef DEBUG_ZLB
-        l2tp_log (LOG_DEBUG, "%s: control ZLB received\n", __FUNCTION__);
+		if (gconfig.debug)
+			l2tp_log (LOG_DEBUG, "%s: control ZLB received\n", __FUNCTION__);
     #endif
         t->control_rec_seq_num--;
         c->cnu = 0;
@@ -1796,8 +1805,9 @@
             if (c->container->cLr >= c->closeSs)
             {
     #ifdef DEBUG_ZLB
-                l2tp_log (LOG_DEBUG, "%s: ZLB for closing message found\n",
-                     __FUNCTION__);
+				if (gconfig.debug)
+					l2tp_log (LOG_DEBUG, "%s: ZLB for closing message found\n",
+						__FUNCTION__);
     #endif
                 c->needclose = 0;
                 /* Trigger final closing of call */
@@ -1890,8 +1900,9 @@
             else if (buf->len == sizeof (struct payload_hdr))
             {
 #ifdef DEBUG_ZLB
-                l2tp_log (LOG_DEBUG, "%s: payload ZLB received\n",
-                     __FUNCTION__);
+				if (gconfig.debug)
+					l2tp_log (LOG_DEBUG, "%s: payload ZLB received\n",
+						__FUNCTION__);
 #endif
 /*					if (c->throttle) {
 					if (c->pSs > c->pLr + c->rws) {
Index: xl2tpd-1.3.14/file.c
===================================================================
--- xl2tpd-1.3.14.orig/file.c	2019-04-18 00:23:39.000000000 +0800
+++ xl2tpd-1.3.14/file.c	2021-07-19 16:47:41.906497100 +0800
@@ -50,6 +50,7 @@
     gconfig.packet_dump = 0;
     gconfig.debug_tunnel = 0;
     gconfig.debug_state = 0;
+    gconfig.debug = 0;
     gconfig.max_retries = DEFAULT_MAX_RETRIES;
     gconfig.cap_backoff = 0;
     lnslist = NULL;
@@ -885,6 +886,23 @@
     return 0;
 }
 
+int set_debugmisc (char *word, char *value, int context, void *item)
+{
+    switch (context & ~CONTEXT_DEFAULT)
+    {
+    case CONTEXT_GLOBAL:
+        if (set_boolean
+            (word, value, &(((struct global *) item)->debug)))
+            return -1;
+        break;
+    default:
+        snprintf (filerr, sizeof (filerr), "'%s' not valid in this context\n",
+                  word);
+        return -1;
+    }
+    return 0;
+}
+
 int set_assignip (char *word, char *value, int context, void *item)
 {
     switch (context & ~CONTEXT_DEFAULT)
@@ -1587,6 +1605,7 @@
     {"debug packet", &set_debugpacket},
     {"debug tunnel", &set_debugtunnel},
     {"debug state", &set_debugstate},
+    {"debug misc", &set_debugmisc},
     {"ipsec saref", &set_ipsec_saref},
     {"lac", &set_lac},
     {"no lac", &set_lac},
Index: xl2tpd-1.3.14/file.h
===================================================================
--- xl2tpd-1.3.14.orig/file.h	2019-04-18 00:23:39.000000000 +0800
+++ xl2tpd-1.3.14/file.h	2021-07-19 16:47:54.288497100 +0800
@@ -162,6 +162,7 @@
     int debug_network;		/* Print network debugging info? */
     int debug_tunnel;		/* Print tunnel debugging info? */
     int debug_state;		/* Print FSM debugging info? */
+    int debug;				/* Instead of #define DEBUG  */
     int ipsecsaref;
     int sarefnum;		/* Value of IPSEC_REFINFO used by kernel
 				 * (we used to pick 22, but 2.6.36+ took that, so now we pick 30)
Index: xl2tpd-1.3.14/network.c
===================================================================
--- xl2tpd-1.3.14.orig/network.c	2021-07-19 16:41:51.199757979 +0800
+++ xl2tpd-1.3.14/network.c	2021-07-19 16:49:09.398497100 +0800
@@ -221,9 +221,10 @@
     t = buf->tunnel;
 #ifdef DEBUG_CONTROL_XMIT
     if(t) {
-	    l2tp_log (LOG_DEBUG,
-		      "trying to send control packet to %d\n",
-		      t->ourtid);
+		if(gconfig.debug)
+			l2tp_log (LOG_DEBUG,
+				"trying to send control packet to %d\n",
+				t->ourtid);
     }
 #endif
 
@@ -234,7 +235,8 @@
         if (ns < t->cLr)
         {
 #ifdef DEBUG_CONTROL_XMIT
-            l2tp_log (LOG_DEBUG, "%s: Tossing packet %d\n", __FUNCTION__, ns);
+			if(gconfig.debug)
+				l2tp_log (LOG_DEBUG, "%s: Tossing packet %d\n", __FUNCTION__, ns);
 #endif
             /* Okay, it's been received.  Let's toss it now */
             toss (buf);
@@ -257,8 +259,9 @@
 		tv.tv_usec = 0;
 		schedule (tv, control_xmit, buf);
 	#ifdef DEBUG_CONTROL_XMIT
-		l2tp_log (LOG_DEBUG, "%s: Scheduling and transmitting packet %d, t->state=%d\n",
-			 __FUNCTION__, ns, t->state);
+		if(gconfig.debug)
+			l2tp_log (LOG_DEBUG, "%s: Scheduling and transmitting packet %d, t->state=%d\n",
+				__FUNCTION__, ns, t->state);
 	#endif
 		udp_xmit (buf, t);
 		goto finish;
@@ -306,8 +309,9 @@
         tv.tv_usec = 0;
         schedule (tv, control_xmit, buf);
 #ifdef DEBUG_CONTROL_XMIT
-        l2tp_log (LOG_DEBUG, "%s: Scheduling and transmitting packet %d\n",
-             __FUNCTION__, ns);
+		if(gconfig.debug)
+			l2tp_log (LOG_DEBUG, "%s: Scheduling and transmitting packet %d\n",
+				__FUNCTION__, ns);
 #endif
         udp_xmit (buf, t);
     }
Index: xl2tpd-1.3.14/xl2tpd.c
===================================================================
--- xl2tpd-1.3.14.orig/xl2tpd.c	2021-07-19 16:41:51.199757979 +0800
+++ xl2tpd-1.3.14/xl2tpd.c	2021-07-19 16:50:09.936497100 +0800
@@ -911,7 +911,8 @@
             temp = (unsigned short *)entropy_buf;
             tmp->ourtid = *temp & 0xFFFF;
 #ifdef DEBUG_ENTROPY
-            l2tp_log(LOG_DEBUG, "ourtid = %u, entropy_buf = %hx\n", tmp->ourtid, *temp);
+			if (gconfig.debug)
+				l2tp_log(LOG_DEBUG, "ourtid = %u, entropy_buf = %hx\n", tmp->ourtid, *temp);
 #endif
         }
 
@@ -988,8 +989,9 @@
         while (*t && (*t < 33))
             t++;
 #ifdef DEBUG_CONTROL
-        l2tp_log (LOG_DEBUG, "%s: field is %s, value is %s\n",
-            __FUNCTION__, s, t);
+		if (gconfig.debug)
+			l2tp_log (LOG_DEBUG, "%s: field is %s, value is %s\n",
+				__FUNCTION__, s, t);
 #endif
         /* Okay, bit twidling is done.  Let's handle this */
 
@@ -1233,7 +1235,8 @@
     char* host;
     host = strchr (bufp, ' ') + 1;
 #ifdef DEBUG_CONTROL
-    l2tp_log (LOG_DEBUG, "%s: Attempting to tunnel to %s\n",
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: Attempting to tunnel to %s\n",
             __FUNCTION__, host);
 #endif
     if (l2tp_call (host, UDP_LISTEN_PORT, NULL, NULL))
@@ -1293,8 +1296,9 @@
         return 0;
     }
 #ifdef DEBUG_CONTROL
-    l2tp_log (LOG_DEBUG, "%s: Attempting to call on tunnel %d\n",
-            __FUNCTION__, tunl);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: Attempting to call on tunnel %d\n",
+				__FUNCTION__, tunl);
 #endif
     if (lac_call (tunl, NULL, NULL))
         write_res (resf, "%02i OK\n", 0);
@@ -1349,8 +1353,9 @@
         return 0;
     }
 #ifdef DEBUG_CONTROL
-    l2tp_log (LOG_DEBUG, "%s: Attempting to call on tunnel %d\n",
-            __FUNCTION__, tunl);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: Attempting to call on tunnel %d\n",
+				__FUNCTION__, tunl);
 #endif
     if (lac_call (tunl, NULL, NULL))
         write_res (resf, "%02i OK\n", 0);
@@ -1366,8 +1371,9 @@
     callstr = strchr (bufp, ' ') + 1;
     call = atoi (callstr);
 #ifdef DEBUG_CONTROL
-    l2tp_log (LOG_DEBUG, "%s: Attempting to hangup call %d\n", __FUNCTION__,
-            call);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: Attempting to hangup call %d\n", __FUNCTION__,
+				call);
 #endif
     lac_hangup (call);
     write_res (resf, "%02i OK\n", 0);
@@ -1412,8 +1418,9 @@
     }
 
 #ifdef DEBUG_CONTROL
-    l2tp_log (LOG_DEBUG, "%s: Attempting to disconnect tunnel %d\n",
-            __FUNCTION__, tunl);
+	if (gconfig.debug)
+		l2tp_log (LOG_DEBUG, "%s: Attempting to disconnect tunnel %d\n",
+				__FUNCTION__, tunl);
 #endif
     lac_disconnect (tunl);
     write_res (resf, "%02i OK\n", 0);
@@ -1471,8 +1478,9 @@
     if (lac->autodial)
     {
 #ifdef DEBUG_MAGIC
-        l2tp_log (LOG_DEBUG, "%s: Autodialing '%s'\n", __FUNCTION__,
-                lac->entname[0] ? lac->entname : "(unnamed)");
+		if (gconfig.debug)
+			l2tp_log (LOG_DEBUG, "%s: Autodialing '%s'\n", __FUNCTION__,
+				lac->entname[0] ? lac->entname : "(unnamed)");
 #endif
         lac->active = -1;
         switch_io = 1;  /* If we're a LAC, autodials will be ICRQ's */
@@ -1584,7 +1592,8 @@
         if (buf[cnt - 1] == '\n')
             buf[--cnt] = 0;
 #ifdef DEBUG_CONTROL
-        l2tp_log (LOG_DEBUG, "%s: Got message %s (%d bytes long)\n",
+		if (gconfig.debug)
+			l2tp_log (LOG_DEBUG, "%s: Got message %s (%d bytes long)\n",
                 __FUNCTION__, buf, cnt);
 #endif
         bufp = buf;
@@ -1971,8 +1980,9 @@
         if (lac->autodial)
         {
 #ifdef DEBUG_MAGIC
-            l2tp_log (LOG_DEBUG, "%s: Autodialing '%s'\n", __FUNCTION__,
-                    lac->entname[0] ? lac->entname : "(unnamed)");
+			if (gconfig.debug)
+				l2tp_log (LOG_DEBUG, "%s: Autodialing '%s'\n", __FUNCTION__,
+					lac->entname[0] ? lac->entname : "(unnamed)");
 #endif
             lac->active = -1;
             switch_io = 1;      /* If we're a LAC, autodials will be ICRQ's */
