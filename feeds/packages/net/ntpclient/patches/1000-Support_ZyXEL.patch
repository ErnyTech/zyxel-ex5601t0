Index: ntpclient-2015/Makefile
===================================================================
--- ntpclient-2015.orig/Makefile
+++ ntpclient-2015/Makefile
@@ -18,22 +18,27 @@
 
 CFLAGS += -std=c99  # should also still work with -std=c89
 CFLAGS += -D_POSIX_C_SOURCE=199309 -D_BSD_SOURCE
-CFLAGS += -W -Wall  # -W is spelled -Wextra these days, but -W is stilli
+CFLAGS += -W -Wall  # -W is spelled -Wextra these days, but -W is still
                     # valid and works with older compilers.
 CFLAGS += -O2
 CFLAGS += -DPRECISION_SIOCGSTAMP
 CFLAGS += -DENABLE_DEBUG
 CFLAGS += -DENABLE_REPLAY
 # CFLAGS += -DUSE_OBSOLETE_GETTIMEOFDAY
+CFLAGS += -DZyXEL_PATCH
+ifeq ($(CONFIG_ZYXEL_TTNET_NTP_MULTIWAN),y)
+CFLAGS += -DZYXEL_TTNET_NTP_MULTIWAN
+endif
 
-LOADLIBES += -lrt
+ZYXEL_LIBS = -lzcfg_msg -lzlog -lzos
+LOADLIBES += -lrt $(ZYXEL_LIBS)
 
 all: ntpclient
 
 test: ntpclient
 	./ntpclient -d -r <test.dat
 
-ntpclient: ntpclient.o phaselock.o
+ntpclient: ntpclient.o phaselock.o extern.o
 
 ntpclient.o phaselock.o: ntpclient.h
 
Index: ntpclient-2015/extern.c
===================================================================
--- /dev/null
+++ ntpclient-2015/extern.c
@@ -0,0 +1,75 @@
+#ifdef ZyXEL_PATCH
+#include <stdio.h>
+#include <string.h>
+
+
+/*ZyXEL zcfg*/
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_access.h"
+#include "zcfg_msg.h"
+#include <json/json.h>
+
+
+void ntpclient_eid_register( void ){
+	/*Register dnsmasq eid which is defined in zcfg_eid.h*/
+	zcfgEidInit(ZCFG_EID_NTPCLIENT, NULL);
+}
+
+static zcfgRet_t ntpclient_msg_send(int msg_type, zcfg_msg_eid_t eid, int payloadLen, const char *payload)
+{
+	zcfgRet_t ret;
+	void *sendBuf = NULL;
+	void *recvBuf = NULL;
+	zcfgMsg_t *sendMsgHdr = NULL;
+	zcfgMsg_t *recvMsgHdr = NULL;
+	int buf_size = 0;
+
+	buf_size = sizeof(zcfgMsg_t)+payloadLen;
+	sendBuf = malloc(buf_size);
+	sendMsgHdr = (zcfgMsg_t*)sendBuf;
+
+	sendMsgHdr->type = msg_type;
+	sendMsgHdr->length = payloadLen;
+	sendMsgHdr->srcEid = ZCFG_EID_NTPCLIENT;
+	sendMsgHdr->dstEid = eid;
+	if(payload != NULL)
+		memcpy(sendBuf+sizeof(zcfgMsg_t), payload, payloadLen);
+
+	ret = zcfgMsgSendAndGetReply(sendMsgHdr, (zcfgMsg_t **)&recvBuf, 0);
+
+	if(ret == ZCFG_SUCCESS) {
+		recvMsgHdr = (zcfgMsg_t*)recvBuf;
+
+		if(recvMsgHdr->type == RESPONSE_SUCCESS) {
+			/*Success*/
+		}
+		free(recvBuf);
+	}
+
+	return ret;
+}
+
+void handle_ntpsync_success(char *dateTime)
+{
+	zcfgRet_t ret;
+
+	/* send ZCFG_MSG_MGABDEV_DETECT to ESMD for notification  */
+	ret = ntpclient_msg_send(ZCFG_MSG_NTP_SYNC_SUCCESS, ZCFG_EID_ESMD, strlen(dateTime)+1, dateTime);
+	if(ret != ZCFG_SUCCESS && ret != ZCFG_SUCCESS_AND_NO_REPLY)
+		printf( "%s ntpclient_msg_send fail,ret=%d", __func__, ret);
+
+}
+
+void handle_ntp_complete_msgsend(zcfg_msg_eid_t eid, char *payload)
+{
+	zcfgRet_t ret;
+
+	/* send ZCFG_MSG_NTP_SYNC_SUCCESS to eid for notification  */
+	ret = ntpclient_msg_send(ZCFG_MSG_NTP_SYNC_SUCCESS, eid, strlen(payload)+1, payload);
+	if(ret != ZCFG_SUCCESS && ret != ZCFG_SUCCESS_AND_NO_REPLY)
+		printf( "%s ntpclient_msg_send fail,ret=%d", __func__, ret);
+
+}
+
+#endif
+
Index: ntpclient-2015/ntpclient.c
===================================================================
--- ntpclient-2015.orig/ntpclient.c
+++ ntpclient-2015/ntpclient.c
@@ -50,6 +50,16 @@
 #ifdef USE_OBSOLETE_GETTIMEOFDAY
 #include <sys/time.h>
 #endif
+#ifdef ZyXEL_PATCH
+#include <signal.h>
+#include <poll.h>
+#include "zcfg_msg.h"
+#define SNTP_RESULT_FILE "/tmp/sntp.dat"
+
+#ifdef __linux__
+#undef __linux__
+#endif
+#endif
 
 #include "ntpclient.h"
 
@@ -71,6 +81,27 @@ int debug=0;
 #define  REPLAY_OPTION
 #endif
 
+#ifdef ZyXEL_PATCH
+#define  FIRST_SYNC_OPTION   "n:"
+#define  SEND_MSG_OPTION   "m:"
+#define  DIAG_OPTION   "z"
+#else
+#define  FIRST_SYNC_OPTION
+#define  SEND_MSG_OPTION
+#define  DIAG_OPTION
+#endif
+
+#ifdef ZYXEL_TTNET_NTP_MULTIWAN//wan interface of NTP
+#define  WAN_OPTION   "w:x:"
+#else
+#define  WAN_OPTION
+#endif
+
+#define MAX_ONSTARTING_COUNT  20
+#define ONSTARTING_SETUPTRANS_SUSPEND_TIME  2
+#define ONSTARTING_NTPHANDLE_SUSPEND_TIME 1
+
+
 extern char *optarg;  /* according to man 2 getopt */
 
 #include <stdint.h>
@@ -119,6 +150,23 @@ struct ntptime {
 	unsigned int fine;
 };
 
+#ifdef ZyXEL_PATCH
+#define NTP_MAX 5
+typedef struct {
+	char *hostname;
+	int port;
+	struct in_addr addr;
+	unsigned short isResolv;
+} NTP_SERVER;
+static int srv_stop = 0;
+char dateTime[32] = {0};
+char gBuff[32] = {0};
+#endif
+#ifdef ZYXEL_TTNET_NTP_MULTIWAN//TTnet, wan interface of NTP
+char gRouteDelCmd[128] = {0};
+#endif
+
+
 struct ntp_control {
 	u32 time_of_send[2];
 	int live;
@@ -128,10 +176,25 @@ struct ntp_control {
 	int goodness;
 	int cross_check;
 	char serv_addr[4];
+#ifdef ZyXEL_PATCH
+	NTP_SERVER ntp_server[NTP_MAX];
+	int ntp_server_count;
+	int diag_test;
+	zcfgEid_t msg_receiver_eid;
+#endif
+#ifdef ZYXEL_TTNET_NTP_MULTIWAN//wan interface NTP
+	char wanInterface[12];
+	char gateWayAddr[17];
+#endif
+
 };
 
 /* prototypes for some local routines */
+#ifdef ZyXEL_PATCH
+int send_packet(int usd, u32 time_sent[2]);
+#else
 static void send_packet(int usd, u32 time_sent[2]);
+#endif
 static int rfc1305print(u32 *data, struct ntptime *arrival, struct ntp_control *ntpc, int *error);
 /* static void udp_handle(int usd, char *data, int data_len, struct sockaddr *sa_source, int sa_len); */
 
@@ -203,6 +266,14 @@ static void set_time(struct ntptime *new
 		printf("set time to %" PRId64 ".%.6" PRId64 "\n", (int64_t)tv_set.tv_sec, (int64_t)tv_set.tv_usec);
 	}
 #endif
+
+#ifdef ZyXEL_PATCH
+	struct tm *tm_ptr;
+	tm_ptr = localtime(&(tv_set.tv_sec));
+	strftime(dateTime, sizeof(dateTime), "%Y-%m-%dT%H:%M:%S", tm_ptr);
+	strftime(gBuff, sizeof(gBuff), "%Y-%m-%d %H:%M:%S", tm_ptr);
+#endif
+
 }
 
 static void ntpc_gettime(u32 *time_coarse, u32 *time_fine)
@@ -223,8 +294,16 @@ static void ntpc_gettime(u32 *time_coars
 	*time_fine   = NTPFRAC(now.tv_usec);
 #endif
 }
+#ifdef ZyXEL_PATCH
+void stop_handler(int signal)
+{
+  srv_stop = 1;
+}
 
+int send_packet(int usd, u32 time_sent[2])
+#else
 static void send_packet(int usd, u32 time_sent[2])
+#endif
 {
 	u32 data[12];
 #define LI 0
@@ -235,10 +314,12 @@ static void send_packet(int usd, u32 tim
 #define PREC -6
 
 	if (debug) fprintf(stderr,"Sending ...\n");
+#ifndef ZyXEL_PATCH
 	if (sizeof data != 48) {
 		fprintf(stderr,"size error\n");
 		return;
 	}
+#endif
 	memset(data, 0, sizeof data);
 	data[0] = htonl (
 		( LI << 30 ) | ( VN << 27 ) | ( MODE << 24 ) |
@@ -248,7 +329,11 @@ static void send_packet(int usd, u32 tim
 	ntpc_gettime(time_sent, time_sent+1);
 	data[10] = htonl(time_sent[0]); /* Transmit Timestamp coarse */
 	data[11] = htonl(time_sent[1]); /* Transmit Timestamp fine   */
+#ifdef ZyXEL_PATCH
+	return send(usd,data,48,0);
+#else
 	send(usd,data,48,0);
+#endif
 }
 
 static void get_packet_timestamp(int usd, struct ntptime *udp_arrival_ntp)
@@ -436,21 +521,38 @@ fail:
 #endif
 	return 1;
 }
-
+#ifdef ZyXEL_PATCH
+char* stuff_net_addr(struct in_addr *p, char *hostname)
+#else
 static void stuff_net_addr(struct in_addr *p, char *hostname)
+#endif
 {
 	struct hostent *ntpserver;
 	ntpserver=gethostbyname(hostname);
 	if (ntpserver == NULL) {
-		herror(hostname);
+		if(debug) herror(hostname);
+#ifdef ZyXEL_PATCH
+		strcpy(gBuff, "Error_CannotResolveHostName");
+		return NULL;
+#else
 		exit(1);
+#endif
 	}
 	if (ntpserver->h_length != 4) {
 		/* IPv4 only, until I get a chance to test IPv6 */
 		fprintf(stderr,"oops %d\n",ntpserver->h_length);
+#ifdef ZyXEL_PATCH
+		return NULL;
+#else
 		exit(1);
+#endif
 	}
+#ifdef ZyXEL_PATCH
+	if(p != NULL) memcpy(&(p->s_addr),ntpserver->h_addr_list[0],4);
+	return ntpserver->h_addr_list[0];
+#else
 	memcpy(&(p->s_addr),ntpserver->h_addr_list[0],4);
+#endif
 }
 
 static void setup_receive(int usd, unsigned int interface, short port)
@@ -468,18 +570,103 @@ static void setup_receive(int usd, unsig
 	/* listen(usd,3); this isn't TCP; thanks Alexander! */
 }
 
+#ifdef ZyXEL_PATCH
+int setup_transmit(int usd, struct ntp_control *ntpc, int host_idx)
+#else
 static void setup_transmit(int usd, char *host, short port, struct ntp_control *ntpc)
+#endif
 {
+#ifdef ZyXEL_PATCH
+	if(ntpc == NULL) return 0;
+	if(host_idx < 0 || host_idx > ntpc->ntp_server_count)
+		return 0;
+	char *host;
+	int port;
+#endif
 	struct sockaddr_in sa_dest;
 	memset(&sa_dest, 0, sizeof sa_dest);
 	sa_dest.sin_family=AF_INET;
+#ifdef ZyXEL_PATCH
+	host = ntpc->ntp_server[host_idx].hostname;
+	port = ntpc->ntp_server[host_idx].port;
+	if(stuff_net_addr(&(sa_dest.sin_addr),host) == NULL)
+		return 0;
+	ntpc->ntp_server[host_idx].isResolv = 1;
+	ntpc->ntp_server[host_idx].addr = sa_dest.sin_addr;
+#else
 	stuff_net_addr(&(sa_dest.sin_addr),host);
+#endif
 	memcpy(ntpc->serv_addr,&(sa_dest.sin_addr),4); /* XXX asumes IPv4 */
+#ifdef ZYXEL_TTNET_NTP_MULTIWAN//TTnet, wan interface of NTP
+	//printf("setup_transmit: ---%s---%s--%s--\r\n",inet_ntoa(sa_dest.sin_addr),ntpc->wanInterface,ntpc->gateWayAddr);
+	char routeCmd[128] = {0};
+	if(strcmp(ntpc->gateWayAddr, "") && strcmp(ntpc->gateWayAddr, "wanInterface"))
+	sprintf(routeCmd,"ip route add %s/32 via %s dev %s",inet_ntoa(sa_dest.sin_addr),ntpc->gateWayAddr,ntpc->wanInterface);
+	system(routeCmd);
+	printf("%s %d routeCmd=%s\n", __func__, __LINE__, routeCmd);
+	sprintf(gRouteDelCmd,"ip route del %s/32 via %s dev %s",inet_ntoa(sa_dest.sin_addr),ntpc->gateWayAddr,ntpc->wanInterface);
+#endif
 	sa_dest.sin_port=htons(port);
 	if (connect(usd,(struct sockaddr *)&sa_dest,sizeof sa_dest)==-1)
+#ifdef ZyXEL_PATCH
+	{
+		strcpy(gBuff, "Error_Other");
+		return 0;
+	}
+	else
+	{
+		return 1;
+	}
+#else
 		{perror("connect");exit(1);}
+#endif
 }
+#ifdef ZyXEL_PATCH
+int ntp_handle(int usd, struct ntp_control *ntpc, int *_e){
+	struct sockaddr sa_xmit;
+	int i, pack_len, error;
+	socklen_t sa_xmit_len;
+	struct ntptime udp_arrival_ntp;
+	static u32 incoming_word[325];
+#define incoming ((char *) incoming_word)
+#define sizeof_incoming (sizeof incoming_word)
+	unsigned short isUpdateTime = 0;
+	struct pollfd poll_fd;
+	memset(&poll_fd, 0, sizeof(struct pollfd));
+
+	sa_xmit_len=sizeof sa_xmit;
+	send_packet(usd,ntpc->time_of_send);
+	poll_fd.fd = usd; /* We'll be polling shortly */
+	poll_fd.events = POLLIN;
+
+	if( poll( &poll_fd, 1, 5000 ) ) {
+		if (debug) printf("Receive.....\n");
+
+		pack_len=recvfrom(usd,incoming,sizeof_incoming,0,
+		                  &sa_xmit,&sa_xmit_len);
+		error = ntpc->goodness;
+		if (pack_len<0) {
+			if (debug) perror("recvfrom");
+		} else if (pack_len>0 && (unsigned)pack_len<sizeof_incoming){
+			get_packet_timestamp(usd, &udp_arrival_ntp);
+			if (check_source(pack_len, &sa_xmit, sa_xmit_len, ntpc)!=0) goto fail;
+			if (rfc1305print(incoming_word, &udp_arrival_ntp, ntpc, &error)!=0) goto fail;
+			/* udp_handle(usd,incoming,pack_len,&sa_xmit,sa_xmit_len); */
+			isUpdateTime = 1;
+		} else {
+			if (debug) printf("Ooops.  pack_len=%d\n",pack_len);
+			fflush(stdout);
+		}
+
+		*_e = error;
+	}
+fail:
+#undef incoming
+#undef sizeof_incoming
 
+	return isUpdateTime;
+}
+#else
 static void primary_loop(int usd, struct ntp_control *ntpc)
 {
 	fd_set fds;
@@ -543,6 +730,10 @@ static void primary_loop(int usd, struct
 #undef incoming
 #undef sizeof_incoming
 }
+#endif
+
+
+
 
 #ifdef ENABLE_REPLAY
 static void do_replay(void)
@@ -610,9 +801,32 @@ int main(int argc, char *argv[]) {
 	ntpc.cycle_time=600;          /* seconds */
 	ntpc.goodness=0;
 	ntpc.cross_check=1;
+	int onstarting = MAX_ONSTARTING_COUNT;
+
+#ifdef ZyXEL_PATCH
+	int port, probes_sent=0, err;
+	char *tmp;
+	int ntp_idx = 0, ntp_first_sync = 0;
+	static int first_time = 1; /* Keep track if it's the first time enabled ntpclient */
+
+	ntpc.ntp_server_count = 0;
+	ntpc.diag_test = 0;
+	memset(ntpc.ntp_server, 0, sizeof(NTP_SERVER)*NTP_MAX);
+	ntpc.msg_receiver_eid = 0;
+	ntpclient_eid_register();
+#endif
+#ifdef ZYXEL_TTNET_NTP_MULTIWAN//wan interface NTP
+	memset(ntpc.wanInterface, 0, sizeof(ntpc.ntp_server));
+	memset(ntpc.gateWayAddr, 0, sizeof(ntpc.gateWayAddr));
+#endif
+
 
 	for (;;) {
-		c = getopt( argc, argv, "c:" DEBUG_OPTION "f:g:h:i:lp:q:" REPLAY_OPTION "stD");
+#ifdef ZYXEL_TTNET_NTP_MULTIWAN//wan interface NTP
+		c = getopt( argc, argv, "c:" DEBUG_OPTION "f:g:h:i:lp:q:" REPLAY_OPTION SEND_MSG_OPTION FIRST_SYNC_OPTION DIAG_OPTION WAN_OPTION "stD");
+#else
+		c = getopt( argc, argv, "c:" DEBUG_OPTION "f:g:h:i:lp:q:" REPLAY_OPTION SEND_MSG_OPTION FIRST_SYNC_OPTION DIAG_OPTION "stD");
+#endif
 		if (c == EOF) break;
 		switch (c) {
 			case 'c':
@@ -633,7 +847,23 @@ int main(int argc, char *argv[]) {
 				ntpc.goodness = atoi(optarg);
 				break;
 			case 'h':
+#ifdef ZyXEL_PATCH
+				if(ntpc.ntp_server_count >= NTP_MAX){
+					fprintf(stderr, "Only support %d NTP server. \n", NTP_MAX);
+					exit(1);
+				}
+				port = 0;
 				hostname = optarg;
+				if((tmp = strchr(hostname, ':')) != NULL){
+					*tmp = '\0';
+					port = atoi(tmp+1);
+				}
+				ntpc.ntp_server[ntpc.ntp_server_count].hostname = hostname;
+				ntpc.ntp_server[ntpc.ntp_server_count].port = ((port == 0) ? NTP_PORT : port);
+				ntpc.ntp_server_count++;
+#else
+				hostname = optarg;
+#endif
 				break;
 			case 'i':
 				ntpc.cycle_time = atoi(optarg);
@@ -664,13 +894,37 @@ int main(int argc, char *argv[]) {
 			case 'D':
 				daemon(0, 0);
 				break;
-
+#ifdef ZyXEL_PATCH
+			case 'n':
+				ntp_first_sync = atoi(optarg);
+				break;
+			case 'm':
+				ntpc.msg_receiver_eid = atoi(optarg);
+				break;
+			case 'z':
+				ntpc.diag_test = 1; //Note: only support one ntp server for diag test
+				break;
+#endif
+#ifdef ZYXEL_TTNET_NTP_MULTIWAN//wan interface NTP
+			case 'w':
+				memset(ntpc.wanInterface, '\0', sizeof(ntpc.wanInterface));
+				strcpy(ntpc.wanInterface,optarg);
+				break;
+			case 'x':
+				memset(ntpc.gateWayAddr, '\0', sizeof(ntpc.gateWayAddr));
+				strcpy(ntpc.gateWayAddr,optarg);
+				break;
+#endif
 			default:
 				usage(argv[0]);
 				exit(1);
 		}
 	}
+#ifdef ZyXEL_PATCH
+	if (ntpc.ntp_server_count == 0) {
+#else
 	if (hostname == NULL) {
+#endif
 		usage(argv[0]);
 		exit(1);
 	}
@@ -685,6 +939,26 @@ int main(int argc, char *argv[]) {
 	}
 
 	if (debug) {
+#ifdef ZyXEL_PATCH
+		printf("Configuration:\n"
+		"  -c probe_count %d\n"
+		"  -d (debug)     %d\n"
+		"  -g goodness    %d\n"
+		"  -i interval    %d\n"
+		"  -l live        %d\n"
+		"  -p local_port  %d\n"
+		"  -q min_delay   %f\n"
+		"  -s set_clock   %d\n"
+		"  -x cross_check %d\n",
+		ntpc.probe_count, debug, ntpc.goodness,
+		ntpc.cycle_time, ntpc.live, udp_local_port, min_delay,
+		ntpc.set_clock, ntpc.cross_check );
+
+		printf("  -h hostname    \n");
+		for(c=0; c<ntpc.ntp_server_count; c++){
+			printf("\t\t %d => %s\n", (c+1), ntpc.ntp_server[c].hostname);
+		}
+#else
 		printf("Configuration:\n"
 		"  -c probe_count %d\n"
 		"  -d (debug)     %d\n"
@@ -699,8 +973,105 @@ int main(int argc, char *argv[]) {
 		ntpc.probe_count, debug, ntpc.goodness,
 		hostname, ntpc.cycle_time, ntpc.live, udp_local_port, min_delay,
 		ntpc.set_clock, ntpc.cross_check );
+#endif
+	}
+#ifdef ZyXEL_PATCH
+	signal(SIGKILL, &stop_handler);
+	signal(SIGHUP, &stop_handler);
+	signal(SIGTERM, &stop_handler);
+	signal(SIGQUIT, &stop_handler);
+#endif
+
+#ifdef ZyXEL_PATCH
+	for (ntp_idx = 0;srv_stop == 0;) {
+		if ((probes_sent >= ntpc.probe_count && ntpc.probe_count != 0)) {
+			break;
+		}
+		/* Startup sequence */
+		if ((usd=socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP))==-1)
+			{perror ("socket");exit(1);}
+
+		setup_receive(usd, INADDR_ANY, udp_local_port);
+
+		if(ntp_idx >= ntpc.ntp_server_count) ntp_idx = 0;
+		if(!setup_transmit(usd, &ntpc, ntp_idx)){
+			if (ntpc.diag_test){
+				if(ntpc.msg_receiver_eid > 0 && ntpc.msg_receiver_eid < ZCFG_EID_MAX){
+					handle_ntp_complete_msgsend(ntpc.msg_receiver_eid, gBuff);
+				}
+				exit(1);
+			}
+
+			if(onstarting)
+			{
+				sleep(ONSTARTING_SETUPTRANS_SUSPEND_TIME);
+				onstarting--;
+			}else sleep(15);
+			ntp_idx++;
+			close(usd);
+			continue;
+		}
+
+		if (debug)
+			printf("Connect NTP server %s (%s)\n",
+				ntpc.ntp_server[ntp_idx].hostname,
+				inet_ntoa(ntpc.ntp_server[ntp_idx].addr));
+
+		if(!ntp_handle(usd, &ntpc, &err))
+		{
+			if (ntpc.diag_test) break;
+			ntp_idx++;
+			if(onstarting)
+			{
+				sleep(ONSTARTING_NTPHANDLE_SUSPEND_TIME);
+				onstarting--;
+			}
+			else sleep(5);
+
+			close(usd);
+			continue;
+		}
+		else {
+			probes_sent++;
+			if(ntpc.set_clock){
+				system("date > "SNTP_RESULT_FILE);
+				/*notify the ntp sync success , by charisse*/
+				handle_ntpsync_success(dateTime);
+			}
+			/* best rollover option: specify -g, -s, and -l.
+			 * simpler rollover option: specify -s and -l, which
+			 * triggers a magic -c 1 */
+			if ((err < ntpc.goodness && ntpc.goodness != 0) ||
+				(probes_sent >= ntpc.probe_count && ntpc.probe_count != 0)) {
+				ntpc.set_clock = 0;
+				if (!ntpc.live) break;
+			}
+			if (ntpc.diag_test) break;
+		}
+		close(usd);
+#if ZyXEL_PATCH
+		if(first_time) {
+			first_time = 0;
+			sleep(ntp_first_sync); /* Sleep 300 seconds for the first time synchronization */
+		}
+		else
+#endif
+		sleep(ntpc.cycle_time);
 	}
 
+#ifdef ZyXEL_PATCH
+	if(ntpc.msg_receiver_eid > 0 && ntpc.msg_receiver_eid < ZCFG_EID_MAX){
+		handle_ntp_complete_msgsend(ntpc.msg_receiver_eid, gBuff);
+	}
+#endif
+
+#ifdef ZYXEL_TTNET_NTP_MULTIWAN
+	if(strcmp(gRouteDelCmd, "")){
+		system(gRouteDelCmd);
+	}
+#endif
+
+#else
 	/* Startup sequence */
 	if ((usd=socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP))==-1) {
 		perror ("socket");
@@ -712,6 +1083,7 @@ int main(int argc, char *argv[]) {
 	setup_transmit(usd, hostname, NTP_PORT, &ntpc);
 
 	primary_loop(usd, &ntpc);
+#endif
 
 	close(usd);
 	return 0;
Index: ntpclient-2015/ntpclient.h
===================================================================
--- ntpclient-2015.orig/ntpclient.h
+++ ntpclient-2015/ntpclient.h
@@ -14,4 +14,8 @@ extern double min_delay;
 /* prototype for function defined in phaselock.c */
 int contemplate_data(unsigned int absolute, double skew, double errorbar, int freq);
 
+#ifdef ZyXEL_PATCH
+void ntpclient_eid_register( void );
+void handle_ntpsync_success(char*);
 #endif
+#endif
\ No newline at end of file
