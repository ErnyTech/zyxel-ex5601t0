Index: bridge-utils-1.7/brctl/brctl.c
===================================================================
--- bridge-utils-1.7.orig/brctl/brctl.c
+++ bridge-utils-1.7/brctl/brctl.c
@@ -43,6 +43,10 @@ int main(int argc, char *const* argv)
 		{ .name = "version", .val = 'V' },
 		{ 0 }
 	};
+#if defined(PLATFORM_ECONET)
+	int ret;
+#endif
+
 
 	while ((f = getopt_long(argc, argv, "Vh", options, NULL)) != EOF) 
 		switch(f) {
@@ -78,8 +82,16 @@ int main(int argc, char *const* argv)
 		printf("Usage: brctl %s %s\n", cmd->name, cmd->help);
 		return 1;
 	}
+#if defined(PLATFORM_ECONET)
+	ret = cmd->func(argc, argv);
 
+#ifndef ZCFG_USED //ZYXEL, Mark, do not excute this script. becuse the zcfg will config bridge interface MAC address.
+	system("/usr/script/br_conf.sh");
+#endif
+	return ret;
+#else
 	return cmd->func(argc, argv);
+#endif
 
 help:
 	help();
Index: bridge-utils-1.7/brctl/brctl_cmd.c
===================================================================
--- bridge-utils-1.7.orig/brctl/brctl_cmd.c
+++ bridge-utils-1.7/brctl/brctl_cmd.c
@@ -25,6 +25,10 @@
 #include "libbridge.h"
 #include "brctl.h"
 
+#if defined(PLATFORM_ECONET)
+#include <linux/version.h>
+#endif
+
 static int strtotimeval(struct timeval *tv, const char *time)
 {
 	double secs;
@@ -395,10 +399,18 @@ static int br_cmd_showmacs(int argc, cha
 
 		offset += n;
 	}
-
 	qsort(fdb, offset, sizeof(struct fdb_entry), compare_fdbs);
 
+#if defined(ZYXEL_PATCH)
+	printf("port no\tmac addr\t\tis local?\tageing timer\tifname\n");
+#else
 	printf("port no\tmac addr\t\tis local?\tageing timer\n");
+#endif
+
+#if defined(ZYXEL_PATCH)
+	char ifName[IFNAMSIZ];
+#endif
+
 	for (i = 0; i < offset; i++) {
 		const struct fdb_entry *f = fdb + i;
 		printf("%3i\t", f->port_no);
@@ -407,6 +419,12 @@ static int br_cmd_showmacs(int argc, cha
 		       f->mac_addr[3], f->mac_addr[4], f->mac_addr[5]);
 		printf("%s\t\t", f->is_local?"yes":"no");
 		br_show_timer(&f->ageing_timer_value);
+#if defined(ZYXEL_PATCH)
+		ifName[0] = 0;
+		if(!get_ifname(brname, f->port_no, ifName)){
+			printf("\t\t%s", ifName);
+		}
+#endif
 		printf("\n");
 	}
 	return 0;
@@ -448,6 +466,376 @@ static int br_cmd_hairpin(int argc, char
 	return err != 0;
 }
 
+
+#if defined(PLATFORM_ECONET)
+#ifdef TCSUPPORT_IGMP_SNOOPING
+static int br_cmd_igmpsnoop(int argc, char *const* argv)
+{
+	int igmpsnoop, err;
+
+	if (!strcmp(argv[2], "on") || !strcmp(argv[2], "yes")
+	    || !strcmp(argv[2], "1"))
+		igmpsnoop = 1;
+	else if (!strcmp(argv[2], "off") || !strcmp(argv[2], "no")
+		 || !strcmp(argv[2], "0"))
+		igmpsnoop = 0;
+	else {
+		fprintf(stderr, "expect on/off for argument\n");
+		return 1;
+	}
+
+	err = br_set_igmpsnoop_state(argv[1], igmpsnoop);
+	if (err)
+		fprintf(stderr, "set igmpsnoop status failed: %s\n",
+			strerror(errno));
+	return err != 0;
+}
+
+static int br_cmd_set_igmpsnoop_ageing(int argc, char *const* argv)
+{
+	int err;
+	struct timeval tv;
+
+	if (strtotimeval(&tv, argv[2])) {
+		fprintf(stderr, "bad ageing time value\n");
+		return 1;
+	}
+
+	err = br_set_igmpsnoop_ageing_time(argv[1], &tv);
+	if (err)
+		fprintf(stderr, "set ageing time failed: %s\n",
+			strerror(err));
+
+	return err != 0;
+}
+
+static int br_cmd_quickleave(int argc, char *const* argv)
+{
+	int quickleave, err;
+
+	if (!strcmp(argv[2], "on") || !strcmp(argv[2], "yes")
+	    || !strcmp(argv[2], "1"))
+		quickleave = 1;
+	else if (!strcmp(argv[2], "off") || !strcmp(argv[2], "no")
+		 || !strcmp(argv[2], "0"))
+		quickleave = 0;
+	else {
+		fprintf(stderr, "expect on/off for argument\n");
+		return 1;
+	}
+
+	err = br_set_igmpsnoop_quickleave(argv[1], quickleave);
+	if (err)
+		fprintf(stderr, "set igmpsnoop quickleave failed: %s\n",
+			strerror(errno));
+	return err != 0;
+}
+
+static int br_cmd_routeportflag(int argc, char *const* argv)
+{
+	int routePortFlag, err;
+
+	if (!strcmp(argv[2], "on") || !strcmp(argv[2], "yes")
+	    || !strcmp(argv[2], "1"))
+		routePortFlag = 1;
+	else if (!strcmp(argv[2], "off") || !strcmp(argv[2], "no")
+		 || !strcmp(argv[2], "0"))
+		routePortFlag = 0;
+	else {
+		fprintf(stderr, "expect on/off for argument\n");
+		return 1;
+	}
+
+	err = br_set_igmpsnoop_routeportflag(argv[1], routePortFlag);
+	if (err)
+		fprintf(stderr, "set igmpsnoop routeportflag failed: %s\n",
+			strerror(errno));
+	return err != 0;
+}
+
+static int br_cmd_igmpdbg(int argc, char *const* argv)
+{
+	int igmpdbg, err;
+
+	if (!strcmp(argv[2], "on") || !strcmp(argv[2], "yes")
+	    || !strcmp(argv[2], "1"))
+		igmpdbg = 1;
+	else if (!strcmp(argv[2], "off") || !strcmp(argv[2], "no")
+		 || !strcmp(argv[2], "0"))
+		igmpdbg = 0;
+	else {
+		fprintf(stderr, "expect on/off for argument\n");
+		return 1;
+	}
+
+	err = br_set_igmpsnoop_dbg(argv[1], igmpdbg);
+	if (err)
+		fprintf(stderr, "set igmpsnoop dbg failed: %s\n",
+			strerror(errno));
+	return err != 0;
+}
+
+static int dump_igmp_port_info(const char *br, const char *p,  void *arg)
+{
+	struct port_info pinfo;
+
+	if (br_get_port_info(br, p, &pinfo)) {
+		printf("Can't get info for %p",p);
+		return 1;
+	}
+
+	printf("%s (%d)\t\tis_router: %s\n", p, pinfo.port_no, pinfo.is_router?"yes":"no");
+	return 0;
+}
+
+void br_dump_igmp_info(const char *br, const struct bridge_info *bri)
+{
+	int err;
+
+	err = br_foreach_port(br, dump_igmp_port_info, NULL);
+	if (err < 0)
+		printf("can't get ports: %s\n", strerror(-err));
+}
+
+static int br_cmd_showigmp(int argc, char *const* argv)
+{
+	const char *brname = argv[1];
+#define CHUNK 128
+	int i, n;
+	struct mc_fdb_entry *fdb = NULL;
+	int offset = 0;
+	struct bridge_info info;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36)
+		u_int8_t group_addr_t[64] = {0};
+#endif
+
+	if (br_get_bridge_info(argv[1], &info)) {
+		fprintf(stderr, "%s: can't get info %s\n", argv[1],
+			strerror(errno));
+		return 1;
+	}
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36)
+	printf("IGMP snooping enabled: %s\n", info.igmpsnoop_enabled?"yes":"no");
+#else
+	printf("Snooping enabled: %s\n", info.igmpsnoop_enabled?"yes":"no");
+#endif
+	printf("quickleave: %s\n", info.igmpsnoop_quickleave?"yes":"no");
+#if !defined(TCSUPPORT_IGMPSNOOPING_ENHANCE)
+	printf("routeportflag: %s\n", info.igmpsnoop_routeportflag?"on":"off");
+#endif
+	printf("debug: %s\n", info.igmpsnoop_dbg?"yes":"no");
+	printf("ageing time=");
+	br_show_timer(&info.igmpsnoop_ageing_time);
+	printf("\n\n");
+
+	br_dump_igmp_info(argv[1], &info);
+	printf("\n");
+
+	for(;;) {
+		fdb = realloc(fdb, (offset + CHUNK) * sizeof(struct mc_fdb_entry));
+		if (!fdb) {
+			fprintf(stderr, "Out of memory\n");
+			return 1;
+		}
+
+		n = br_read_mc_fdb(brname, fdb+offset, offset, CHUNK);
+		if (n == 0)
+			break;
+
+		if (n < 0) {
+			fprintf(stderr, "read of forward table failed: %s\n",
+				strerror(errno));
+			return 1;
+		}
+
+		offset += n;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36)
+		if(n < CHUNK)
+			break;
+#endif
+	}
+
+	qsort(fdb, offset, sizeof(struct mc_fdb_entry), compare_fdbs);
+
+#ifdef TCSUPPORT_IGMP_SNOOPING_V3
+	printf("port no  group addr   host addr     src addr    filter mode  ageing timer\n");
+#else
+	printf("port no\tgroup addr\t\treporter\t\tageing timer\n");
+#endif
+	for (i = 0; i < offset; i++) {
+		const struct mc_fdb_entry *f = fdb + i;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36)
+		memset(group_addr_t, 0, 64);
+#endif
+
+	#ifdef TCSUPPORT_IGMP_SNOOPING_V3
+		printf("%3i", f->port_no);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36)
+		if(f->version == 6)
+		{
+			printf(" [%s]  ", f->group_addr);
+			printf(" [%s]   ", f->src_addr);
+			printf("%2s  ",(f->filter_mode == MCAST_EXCLUDE)?"EX":"IN");
+			printf("\thostMac:%.2x:%.2x:%.2x:%.2x:%.2x:%.2x ",
+			       f->host_addr[0], f->host_addr[1], f->host_addr[2],
+			       f->host_addr[3], f->host_addr[4], f->host_addr[5]);
+			printf("\tgroupMac:%.2x:%.2x:%.2x:%.2x:%.2x:%.2x ",
+			       f->group_mac[0], f->group_mac[1], f->group_mac[2],
+			       f->group_mac[3], f->group_mac[4], f->group_mac[5]);
+		}
+		else{
+#endif
+		printf("%16s  ", f->group_addr);
+		printf("%.2x:%.2x:%.2x:%.2x:%.2x:%.2x ",
+		       f->host_addr[0], f->host_addr[1], f->host_addr[2],
+		       f->host_addr[3], f->host_addr[4], f->host_addr[5]);
+		printf("%16s ", f->src_addr);
+		printf("%2s     ",(f->filter_mode == MCAST_EXCLUDE)?"EX":"IN");
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36)
+		}
+#endif
+	#else
+		printf("%3i\t", f->port_no);
+		printf("%16s\t", f->group_addr);
+		printf("%.2x:%.2x:%.2x:%.2x:%.2x:%.2x\t",
+		       f->host_addr[0], f->host_addr[1], f->host_addr[2],
+		       f->host_addr[3], f->host_addr[4], f->host_addr[5]);
+	#endif
+		br_show_timer(&f->ageing_timer_value);
+		printf("\n");
+	}
+	return 0;
+}
+
+#endif
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36)
+#ifdef TCSUPPORT_MLD_SNOOPING
+static int br_cmd_mldsnooping(int argc, char *const* argv)
+{
+	int mldsnooping = 1, err;
+
+	if (!strcmp(argv[2], "on") || !strcmp(argv[2], "yes")
+	    || !strcmp(argv[2], "1"))
+		mldsnooping = 1;
+	else if (!strcmp(argv[2], "off") || !strcmp(argv[2], "no")
+		 || !strcmp(argv[2], "0"))
+		mldsnooping = 0;
+	else if (!strcmp(argv[2], "show")){
+		err = br_mldsnooping_show(argv[1]);
+		if(err)
+			fprintf(stderr, "show mld snooping state failed\n");
+
+		return err != 0;
+	}
+	else {
+		fprintf(stderr, "expect on/off for argument\n");
+		return 1;
+	}
+
+	err = br_mldsnooping_set_state(argv[1], mldsnooping);
+	if(err)
+		fprintf(stderr, "set mld snooping state failed\n");
+
+	return err != 0;
+}
+
+static int br_cmd_mldsnooping_set_age(int argc, char *const* argv)
+{
+	int err;
+	struct timeval tv;
+
+	if(strtotimeval(&tv, argv[2])){
+		fprintf(stderr, "bad ageing time value\n");
+	}
+
+	err = br_mldsnooping_set_age(argv[1], &tv);
+	if(err)
+		fprintf(stderr, "set mld snooping age time failed\n");
+
+	return err != 0;
+}
+#endif
+#endif
+
+#ifdef TCSUPPORT_OMCI
+static int dump_omci_port_info(const char *br, const char *p,  void *arg)
+{
+	struct port_info pinfo;
+//	char *brname = (char*)arg;
+#define CHUNK 128
+	int i, n;
+	struct fdb_entry *fdb = NULL;
+	int offset = 0;
+
+
+	if (br_get_port_info(br, p, &pinfo)) {
+		printf("Can't get info for %p",p);
+		return 1;
+	}
+
+	for(;;) {
+		fdb = realloc(fdb, (offset + CHUNK) * sizeof(struct fdb_entry));
+		if (!fdb) {
+			fprintf(stderr, "Out of memory\n");
+			return 1;
+		}
+
+		n = br_read_fdb(br, fdb+offset, offset, CHUNK);
+		if (n == 0)
+			break;
+
+		if (n < 0) {
+			fprintf(stderr, "read of forward table failed: %s\n",
+				strerror(errno));
+			return 1;
+		}
+
+		offset += n;
+	}
+
+	qsort(fdb, offset, sizeof(struct fdb_entry), compare_fdbs);
+
+	for (i = 0; i < offset; i++) {
+		const struct fdb_entry *f = fdb + i;
+		if(f->port_no == pinfo.port_no){
+			printf("%s \t", p);
+//			printf("%3i \t", f->port_no);
+			printf("%.2x:%.2x:%.2x:%.2x:%.2x:%.2x \t",
+			       f->mac_addr[0], f->mac_addr[1], f->mac_addr[2],
+			       f->mac_addr[3], f->mac_addr[4], f->mac_addr[5]);
+			printf("%s\t\t", f->is_local?"yes":"no");
+			br_show_timer(&f->ageing_timer_value);
+			printf("\n");
+		}
+	}
+
+//	printf("%s (%d)\t\tis_router: %s\n", p, pinfo.port_no, pinfo.is_router?"yes":"no");
+
+	return 0;
+}
+
+static int br_omci_cmd_showmacs(int argc, char *const* argv)
+{
+	int err;
+
+	if(argc < 2){
+		printf("please input parameters, example br0\n");
+		return 0;
+	}
+//	printf("interface \tport no \tmac addr \t\tis local?\tageing timer\n");
+	printf("interface \tmac addr \t\tis local?\tageing timer\n");
+
+	err = br_foreach_port(argv[1], dump_omci_port_info, NULL);
+	if (err < 0)
+		printf("can't get ports: %s\n", strerror(-err));
+
+	return 0;
+}
+#endif
+#endif
+
 static const struct command commands[] = {
 	{ 1, "addbr", br_cmd_addbr, "<bridge>\t\tadd bridge" },
 	{ 1, "delbr", br_cmd_delbr, "<bridge>\t\tdelete bridge" },
@@ -475,10 +863,57 @@ static const struct command commands[] =
 	  "[ <bridge> ]\t\tshow a list of bridges" },
 	{ 1, "showmacs", br_cmd_showmacs, 
 	  "<bridge>\t\tshow a list of mac addrs"},
-	{ 1, "showstp", br_cmd_showstp, 
+	{ 1, "showstp", br_cmd_showstp,
 	  "<bridge>\t\tshow bridge stp info"},
 	{ 2, "stp", br_cmd_stp,
 	  "<bridge> {on|off}\tturn stp on/off" },
+#if defined(PLATFORM_ECONET)
+#ifdef TCSUPPORT_IGMP_SNOOPING
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36)
+	{ 2, "igmpsnoop", br_cmd_igmpsnoop,
+	  "<bridge> {on|off}\tturn igmpsnoop on/off" },
+	{ 2, "igmpsnoopageing", br_cmd_set_igmpsnoop_ageing,
+	  "<bridge> <time>\t\tset igmpsnoop ageing time" },
+	{ 2, "quickleave", br_cmd_quickleave,
+	  "<bridge> {on|off}\tturn igmpsnoop quickleave on/off" },
+	#if !defined(TCSUPPORT_IGMPSNOOPING_ENHANCE)
+	{ 2, "routeportflag", br_cmd_routeportflag,
+	  "<bridge> {on|off}\tturn igmpsnoop routeportflag on/off" },
+	#endif
+	{ 2, "igmpdbg", br_cmd_igmpdbg,
+	  "<bridge> {on|off}\tturn igmpsnoop dbg on/off" },
+	{ 1, "showigmp", br_cmd_showigmp,
+	  "<bridge>\t\tshow a list of multicast addrs"},
+#else
+	{ 2, "snoop", br_cmd_igmpsnoop,
+	  "<bridge> {on|off}\tturn snoop on/off" },
+	{ 2, "snoopageing", br_cmd_set_igmpsnoop_ageing,
+	  "<bridge> <time>\t\tset snoop ageing time" },
+	{ 2, "quickleave", br_cmd_quickleave,
+	  "<bridge> {on|off}\tturn snoop quickleave on/off" },
+	#if !defined(TCSUPPORT_IGMPSNOOPING_ENHANCE)
+	{ 2, "routeportflag", br_cmd_routeportflag,
+	  "<bridge> {on|off}\tturn igmpsnoop routeportflag on/off" },
+	#endif
+	{ 2, "snoopdbg", br_cmd_igmpdbg,
+	  "<bridge> {on|off}\tturn snoop dbg on/off" },
+	{ 1, "showsnoop", br_cmd_showigmp,
+	  "<bridge>\t\tshow a list of multicast addrs"},
+#endif
+#endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36)
+#ifdef TCSUPPORT_MLD_SNOOPING
+	{ 2, "mldsnooping", br_cmd_mldsnooping,
+	  "<bridge> {on|off}\tturn mldsnooping on/off" },
+	{ 2, "mldsnoopingage", br_cmd_mldsnooping_set_age,
+	  "<bridge> <time>\tset mldsnooping age time" },
+#endif
+#endif
+#ifdef TCSUPPORT_OMCI
+	{ 1, "showportmacs", br_omci_cmd_showmacs,
+	  "<bridge>\t\tshow omci macs"},
+#endif
+#endif
 };
 
 const struct command *command_lookup(const char *cmd)
Index: bridge-utils-1.7/libbridge/libbridge_devif.c
===================================================================
--- bridge-utils-1.7.orig/libbridge/libbridge_devif.c
+++ bridge-utils-1.7/libbridge/libbridge_devif.c
@@ -28,6 +28,10 @@
 #include "libbridge.h"
 #include "libbridge_private.h"
 
+#if defined(PLATFORM_ECONET)
+#include <linux/version.h>
+#endif
+
 static FILE *fpopen(const char *dir, const char *name)
 {
 	char path[SYSFS_PATH_MAX];
@@ -110,6 +114,29 @@ static int get_portno(const char *brname
 	return -1;
 }
 
+#if defined(ZYXEL_PATCH)
+int get_ifname(const char *brname, int portno, char *ifname)
+{
+	int ifindices[MAX_PORTS];
+	unsigned long args[4] = { BRCTL_GET_PORT_LIST,
+				  (unsigned long)ifindices, MAX_PORTS, 0 };
+	struct ifreq ifr;
+
+	memset(ifindices, 0, sizeof(ifindices));
+	strncpy(ifr.ifr_name, brname, IFNAMSIZ);
+	ifr.ifr_data = (char *) &args;
+
+	if (ioctl(br_socket_fd, SIOCDEVPRIVATE, &ifr) < 0) {
+		dprintf("get_portno: get ports of %s failed: %s\n",
+			brname, strerror(errno));
+		return -1;
+	}
+
+	if_indextoname(ifindices[portno], ifname);
+	return 0;
+}
+#endif
+
 /* get information via ioctl */
 static int old_get_bridge_info(const char *bridge, struct bridge_info *info)
 {
@@ -148,6 +175,20 @@ static int old_get_bridge_info(const cha
 			i.topology_change_timer_value);
 	__jiffies_to_tv(&info->gc_timer_value, i.gc_timer_value);
 
+#if defined(PLATFORM_ECONET)
+#ifdef TCSUPPORT_IGMP_SNOOPING
+	/* IGMP snooping information */
+	info->igmpsnoop_enabled = i.igmpsnoop_enabled;
+	info->igmpsnoop_quickleave = i.igmpsnoop_quickleave;
+#ifndef TCSUPPORT_IGMPSNOOPING_ENHANCE
+	info->igmpsnoop_routeportflag = i.igmpsnoop_routeportflag;
+#endif
+	info->igmpsnoop_dbg = i.igmpsnoop_dbg;
+	__jiffies_to_tv(&info->igmpsnoop_ageing_time,
+			i.igmpsnoop_ageing_time);
+#endif
+#endif
+
 	return 0;
 }
 
@@ -239,6 +280,12 @@ static int old_get_port_info(const char
 			i.forward_delay_timer_value);
 	__jiffies_to_tv(&info->hold_timer_value, i.hold_timer_value);
 	info->hairpin_mode = 0;
+
+#if defined(PLATFORM_ECONET)
+#ifdef TCSUPPORT_IGMP_SNOOPING
+	info->is_router = i.is_router;
+#endif
+#endif
 	return 0;
 }
 
@@ -447,3 +494,96 @@ int br_read_fdb(const char *bridge, stru
 
 	return n;
 }
+
+#if defined(PLATFORM_ECONET)
+#ifdef TCSUPPORT_IGMP_SNOOPING
+int br_set_igmpsnoop_state(const char *br, int igmpsnoop_state)
+{
+	return br_set(br, "igmpsnoop_state", igmpsnoop_state, BRCTL_SET_IGMPSNOOPING_STATE);
+}
+
+int br_set_igmpsnoop_ageing_time(const char *br, struct timeval *tv)
+{
+	return br_set(br, "igmpsnoop_ageing_time", __tv_to_jiffies(tv),
+		      BRCTL_SET_IGMPSNOOPING_AGEING_TIME);
+}
+
+int br_set_igmpsnoop_quickleave(const char *br, int igmpsnoop_quickleave)
+{
+	return br_set(br, "igmpsnoop_quickleave", igmpsnoop_quickleave, BRCTL_SET_IGMPSNOOPING_QUICKLEAVE);
+}
+
+#ifndef TCSUPPORT_IGMPSNOOPING_ENHANCE
+int br_set_igmpsnoop_routeportflag(const char *br, int igmpsnoop_routeportflag)
+{
+	return br_set(br, "igmpsnoop_routeportflag", igmpsnoop_routeportflag, BRCTL_SET_IGMPSNOOPING_ROUTEPORTFLAG);
+}
+#endif
+int br_set_igmpsnoop_dbg(const char *br, int igmpsnoop_dbg)
+{
+	return br_set(br, "igmpsnoop_dbg", igmpsnoop_dbg, BRCTL_SET_IGMPSNOOPING_DBG);
+}
+
+
+static inline void __copy_mc_fdb(struct mc_fdb_entry *ent,
+			      const struct __mc_fdb_entry *f)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36)
+	memcpy(ent->group_addr, f->group_addr, 40);
+#else
+	memcpy(ent->group_addr, f->group_addr, 16);
+#endif
+	memcpy(ent->host_addr, f->host_addr, 6);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36)
+	memcpy(ent->group_mac, f->group_mac, 6);
+	ent->version = f->version;
+#endif
+	#ifdef TCSUPPORT_IGMP_SNOOPING_V3
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36)
+	memcpy(ent->src_addr,f->src_addr,40);
+#else
+	memcpy(ent->src_addr,f->src_addr,16);
+#endif
+	ent->filter_mode = f->filter_mode;
+	#endif
+	ent->port_no = f->port_no;
+	__jiffies_to_tv(&ent->ageing_timer_value, f->ageing_timer_value);
+}
+
+int br_read_mc_fdb(const char *bridge, struct mc_fdb_entry *fdbs,
+		unsigned long offset, int num)
+{
+	int i, fd = -1, n;
+	struct __mc_fdb_entry fe[num];
+
+	{
+		/* old kernel, use ioctl */
+		unsigned long args[4] = { BRCTL_GET_MC_FDB_ENTRIES,
+					  (unsigned long) fe,
+					  num, offset };
+		struct ifreq ifr;
+		int retries = 0;
+
+		strncpy(ifr.ifr_name, bridge, IFNAMSIZ);
+		ifr.ifr_data = (char *) args;
+
+	retry:
+		n = ioctl(br_socket_fd, SIOCDEVPRIVATE, &ifr);
+
+		/* table can change during ioctl processing */
+		if (n < 0 && errno == EAGAIN && ++retries < 10) {
+			sleep(0);
+			goto retry;
+		}
+	}
+
+	for (i = 0; i < n; i++)
+		__copy_mc_fdb(fdbs+i, fe+i);
+
+	if (fd > 0)
+		close(fd);
+
+	return n;
+}
+#endif
+#endif
Index: bridge-utils-1.7/libbridge/Makefile.in
===================================================================
--- bridge-utils-1.7.orig/libbridge/Makefile.in
+++ bridge-utils-1.7/libbridge/Makefile.in
@@ -5,7 +5,7 @@ AR=ar
 RANLIB=@RANLIB@
 
 CC=@CC@
-CFLAGS = -Wall @CFLAGS@ $(KERNEL_HEADERS)
+CFLAGS = -Wall -g @CFLAGS@ $(KERNEL_HEADERS)
 
 prefix=@prefix@
 exec_prefix=@exec_prefix@
Index: bridge-utils-1.7/libbridge/libbridge.h
===================================================================
--- bridge-utils-1.7.orig/libbridge/libbridge.h
+++ bridge-utils-1.7/libbridge/libbridge.h
@@ -27,6 +27,14 @@
 #include <linux/if.h>
 #include <linux/if_bridge.h>
 
+#if defined(PLATFORM_ECONET)
+#include <linux/version.h>
+
+#ifdef TCSUPPORT_IGMP_SNOOPING_V3
+#include <linux/in.h>
+#endif
+#endif
+
 /* defined in net/if.h but that conflicts with linux/if.h... */
 extern unsigned int if_nametoindex (const char *__ifname);
 extern char *if_indextoname (unsigned int __ifindex, char *__ifname);
@@ -58,6 +66,16 @@ struct bridge_info
 	struct timeval tcn_timer_value;
 	struct timeval topology_change_timer_value;
 	struct timeval gc_timer_value;
+#if defined(PLATFORM_ECONET)
+#ifdef TCSUPPORT_IGMP_SNOOPING
+	/* IGMP snooping information */
+	unsigned char igmpsnoop_enabled;
+	unsigned char igmpsnoop_quickleave;
+	unsigned char igmpsnoop_routeportflag;
+	unsigned char igmpsnoop_dbg;
+	struct timeval igmpsnoop_ageing_time;
+#endif
+#endif
 };
 
 struct fdb_entry
@@ -68,6 +86,25 @@ struct fdb_entry
 	struct timeval ageing_timer_value;
 };
 
+#if defined(PLATFORM_ECONET)
+#ifdef TCSUPPORT_IGMP_SNOOPING
+struct mc_fdb_entry
+{
+	uint8_t group_addr[40];
+	uint8_t host_addr[6];
+	uint8_t group_mac[6];
+	unsigned char is_router;
+	uint8_t version;
+	uint16_t port_no;
+#ifdef TCSUPPORT_IGMP_SNOOPING_V3
+	uint8_t src_addr[40];
+	uint8_t filter_mode;
+#endif
+	struct timeval ageing_timer_value;
+};
+#endif
+#endif
+
 struct port_info
 {
 	unsigned port_no;
@@ -85,6 +122,11 @@ struct port_info
 	struct timeval forward_delay_timer_value;
 	struct timeval hold_timer_value;
 	unsigned char hairpin_mode;
+#if defined(PLATFORM_ECONET)
+#ifdef TCSUPPORT_IGMP_SNOOPING
+	unsigned char is_router;
+#endif
+#endif
 };
 
 extern int br_init(void);
@@ -120,4 +162,28 @@ extern int br_read_fdb(const char *br, s
 		       unsigned long skip, int num);
 extern int br_set_hairpin_mode(const char *bridge, const char *dev,
 			       int hairpin_mode);
+
+#if defined(PLATFORM_ECONET)
+#ifdef TCSUPPORT_IGMP_SNOOPING
+extern int br_set_igmpsnoop_state(const char *br, int igmpsnoop_state);
+extern int br_set_igmpsnoop_ageing_time(const char *br, struct timeval *tv);
+extern int br_set_igmpsnoop_quickleave(const char *br, int igmpsnoop_quickleave);
+extern int br_set_igmpsnoop_routeportflag(const char *br, int igmpsnoop_routeportflag);
+extern int br_set_igmpsnoop_dbg(const char *br, int igmpsnoop_dbg);
+extern int br_read_mc_fdb(const char *br, struct mc_fdb_entry *fdbs,
+		       unsigned long skip, int num);
+#endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36)
+#ifdef TCSUPPORT_MLD_SNOOPING
+extern int br_mldsnooping_set_age(const char *bridge, struct timeval *tv);
+extern int br_mldsnooping_set_state(const char *bridge, int state);
+extern int br_mldsnooping_show(const char *bridge);
+#endif
+#endif
+#endif
+
+#if defined(ZYXEL_PATCH)
+extern int get_ifname(const char *brname, int portno, char *ifname);
+#endif
+
 #endif
Index: bridge-utils-1.7/libbridge/libbridge_if.c
===================================================================
--- bridge-utils-1.7.orig/libbridge/libbridge_if.c
+++ bridge-utils-1.7/libbridge/libbridge_if.c
@@ -115,3 +115,44 @@ int br_del_interface(const char *bridge,
 
 	return err < 0 ? errno : 0;
 }
+#if defined(PLATFORM_ECONET)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36)
+#ifdef TCSUPPORT_MLD_SNOOPING
+int br_mldsnooping_set_age(const char *bridge, struct timeval *tv)
+{
+	int ret;
+	struct ifreq ifr;
+	unsigned long args[4] = { BRCTL_SET_MLDSNOOPING_AGE, __tv_to_jiffies(tv), 0, 0 };
+	strncpy(ifr.ifr_name, bridge, IFNAMSIZ);
+	ifr.ifr_data = (char *)&args;
+	ret = ioctl(br_socket_fd, SIOCDEVPRIVATE, &ifr);
+
+	return ret < 0 ? errno : 0;
+}
+
+int br_mldsnooping_set_state(const char *bridge, int state)
+{
+	int ret;
+	struct ifreq ifr;
+	unsigned long args[4] = { BRCTL_SET_MLDSNOOPING_STATE, state, 0, 0 };
+	strncpy(ifr.ifr_name, bridge, IFNAMSIZ);
+	ifr.ifr_data = (char *)&args;
+	ret = ioctl(br_socket_fd, SIOCDEVPRIVATE, &ifr);
+
+	return ret < 0 ? errno : 0;
+}
+
+int br_mldsnooping_show(const char *bridge)
+{
+	int ret;
+	struct ifreq ifr;
+	unsigned long args[4] = { BRCTL_GET_MLDSNOOPING_INFO, 0, 0, 0 };
+	strncpy(ifr.ifr_name, bridge, IFNAMSIZ);
+	ifr.ifr_data = (char *)&args;
+	ret = ioctl(br_socket_fd, SIOCDEVPRIVATE, &ifr);
+
+	return ret < 0 ? errno : 0;
+}
+#endif
+#endif
+#endif
\ No newline at end of file
