Index: linux-5.4.168/include/uapi/linux/netfilter_ipv4/ip_nat_rule.h
===================================================================
--- /dev/null
+++ linux-5.4.168/include/uapi/linux/netfilter_ipv4/ip_nat_rule.h
@@ -0,0 +1,28 @@
+#ifndef _IP_NAT_RULE_H
+#define _IP_NAT_RULE_H
+#include <linux/netfilter_ipv4/ip_conntrack.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ip_nat.h>
+
+#ifdef __KERNEL__
+
+extern int ip_nat_rule_init(void) __init;
+extern void ip_nat_rule_cleanup(void);
+extern int ip_nat_rule_find(struct sk_buff **pskb,
+			    unsigned int hooknum,
+			    const struct net_device *in,
+			    const struct net_device *out,
+			    struct ip_conntrack *ct,
+			    struct ip_nat_info *info);
+
+extern unsigned int
+alloc_null_binding(struct ip_conntrack *conntrack,
+		   struct ip_nat_info *info,
+		   unsigned int hooknum);
+
+extern unsigned int
+alloc_null_binding_confirmed(struct ip_conntrack *conntrack,
+			     struct ip_nat_info *info,
+			     unsigned int hooknum);
+#endif
+#endif /* _IP_NAT_RULE_H */
Index: linux-5.4.168/include/uapi/linux/netfilter_ipv4/ipt_TRIGGER.h
===================================================================
--- /dev/null
+++ linux-5.4.168/include/uapi/linux/netfilter_ipv4/ipt_TRIGGER.h
@@ -0,0 +1,24 @@
+#ifndef _IPT_TRIGGER_H_target
+#define _IPT_TRIGGER_H_target
+
+#define TRIGGER_TIMEOUT 600     /* 600 secs */
+
+enum ipt_trigger_type
+{
+       IPT_TRIGGER_DNAT = 1,
+       IPT_TRIGGER_IN = 2,
+        IPT_TRIGGER_OUT = 3
+};
+
+struct ipt_trigger_ports {
+        u_int16_t mport[2];     /* Related destination port range */
+        u_int16_t rport[2];     /* Port range to map related destination port range to */
+};
+
+struct ipt_trigger_info {
+        enum ipt_trigger_type type;
+        u_int16_t proto;        /* Related protocol */
+        struct ipt_trigger_ports ports;
+};
+
+#endif /*_IPT_TRIGGER_H_target*/
Index: linux-5.4.168/net/ipv4/netfilter/Kconfig
===================================================================
--- linux-5.4.168.orig/net/ipv4/netfilter/Kconfig
+++ linux-5.4.168/net/ipv4/netfilter/Kconfig
@@ -361,6 +361,17 @@ config IP_NF_TARGET_TTL
 	(e.g. when running oldconfig). It selects
 	CONFIG_NETFILTER_XT_TARGET_HL.
 
+config IP_NF_TARGET_TRIGGER
+	tristate "TRIGGER target support (port-trigger)"
+	depends on NF_NAT_IPV4
+	---help---
+	Port triggering is a specialized form of port forwarding in which
+	outbound traffic on predetermined ports "triggering ports") causes
+	inbound traffic to specific incoming ports to be dynamically
+	forwarded to the initiating host while the outbound ports are in use.
+
+	To compile it as a module, choose M here.  If unsure, say N.
+
 # raw + specific targets
 config IP_NF_RAW
 	tristate  'raw table support (required for NOTRACK/TRACE)'
Index: linux-5.4.168/net/ipv4/netfilter/Makefile
===================================================================
--- linux-5.4.168.orig/net/ipv4/netfilter/Makefile
+++ linux-5.4.168/net/ipv4/netfilter/Makefile
@@ -61,6 +61,7 @@ obj-$(CONFIG_IP_NF_TARGET_CLUSTERIP) +=
 obj-$(CONFIG_IP_NF_TARGET_ECN) += ipt_ECN.o
 obj-$(CONFIG_IP_NF_TARGET_MASQUERADE) += ipt_MASQUERADE.o
 obj-$(CONFIG_IP_NF_TARGET_REJECT) += ipt_REJECT.o
+obj-$(CONFIG_IP_NF_TARGET_TRIGGER) += ipt_TRIGGER.o
 obj-$(CONFIG_IP_NF_TARGET_SYNPROXY) += ipt_SYNPROXY.o
 
 # generic ARP tables
Index: linux-5.4.168/net/ipv4/netfilter/ipt_TRIGGER.c
===================================================================
--- /dev/null
+++ linux-5.4.168/net/ipv4/netfilter/ipt_TRIGGER.c
@@ -0,0 +1,352 @@
+/* Kernel module to match the port-ranges, trigger related port-ranges,
+  * and alters the destination to a local IP address.
+  *
+  * Copyright (C) 2003, CyberTAN Corporation
+  * All Rights Reserved.
+  *
+  * Description:
+  *   This is kernel module for port-triggering.
+  *
+  *   The module follows the Netfilter framework, called extended packet
+  *   matching modules.
+  */
+
+#include <linux/types.h>
+#include <linux/ip.h>
+#include <linux/tcp.h>
+#include <linux/timer.h>
+#include <linux/module.h>
+#include <linux/netfilter.h>
+#include <linux/netdevice.h>
+#include <linux/if.h>
+#include <linux/inetdevice.h>
+#include <net/protocol.h>
+#include <net/checksum.h>
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_nat_core.h>
+#include <linux/netfilter_ipv4.h>
+#if 0
+#ifdef CONFIG_NF_NAT_NEEDED
+#include <net/netfilter/nf_nat_rule.h>
+#else
+#include <linux/netfilter_ipv4/ip_nat_rule.h>
+#endif
+#endif
+#include <linux/netfilter_ipv4/ipt_TRIGGER.h>
+
+DEFINE_RWLOCK(ip_conntrack_lock);
+
+#if 0
+#define DEBUGP printk
+#else
+#define DEBUGP(format, args...)
+#endif
+
+#ifdef CONFIG_NETFILTER_DEBUG
+#define IP_NF_ASSERT(x)		WARN_ON(!(x))
+#else
+#define IP_NF_ASSERT(x)
+#endif
+
+struct ipt_trigger {
+        struct list_head list;          /* Trigger list */
+        struct timer_list timeout;      /* Timer for list destroying */
+        u_int32_t srcip;                /* Outgoing source address */
+        u_int32_t dstip;                /* Outgoing destination address */
+        u_int16_t mproto;               /* Trigger protocol */
+        u_int16_t rproto;               /* Related protocol */
+        struct ipt_trigger_ports ports; /* Trigger and related ports */
+       u_int8_t reply;                 /* Confirm a reply connection */
+};
+
+LIST_HEAD(trigger_list);
+//DECLARE_LOCK(ip_trigger_lock);
+
+static void trigger_refresh(struct ipt_trigger *trig, unsigned long extra_jiffies)
+{
+   DEBUGP("%s: \n", __FUNCTION__);
+    IP_NF_ASSERT(trig);
+	  write_lock_bh(&ip_conntrack_lock);
+    /* Need del_timer for race avoidance (may already be dying). */
+     if (del_timer(&trig->timeout)) {
+        trig->timeout.expires = jiffies + extra_jiffies;
+        add_timer(&trig->timeout);
+    }
+
+		write_unlock_bh(&ip_conntrack_lock);
+}
+
+static void __del_trigger(struct ipt_trigger *trig)
+{
+    DEBUGP("%s: \n", __FUNCTION__);
+    IP_NF_ASSERT(trig);
+
+     /* delete from 'trigger_list' */
+    list_del(&trig->list);
+    kfree(trig);
+}
+
+static void trigger_timeout(struct timer_list *t)
+{
+    struct ipt_trigger *trig= from_timer(trig, t, timeout);
+
+    DEBUGP("trigger list %p timed out\n", trig);
+		write_lock_bh(&ip_conntrack_lock);
+    __del_trigger(trig);
+	  write_unlock_bh(&ip_conntrack_lock);
+}
+
+static unsigned int
+add_new_trigger(struct ipt_trigger *trig)
+{
+    struct ipt_trigger *new;
+
+    DEBUGP("!!!!!!!!!!!! %s !!!!!!!!!!!\n", __FUNCTION__);
+	  write_lock_bh(&ip_conntrack_lock);
+    new = (struct ipt_trigger *)kmalloc(sizeof(struct ipt_trigger), GFP_ATOMIC);
+
+    if (!new) {
+		  write_unlock_bh(&ip_conntrack_lock);
+        DEBUGP("%s: OOM allocating trigger list\n", __FUNCTION__);
+        return -ENOMEM;
+    }
+    memset(new, 0, sizeof(*trig));
+    INIT_LIST_HEAD(&new->list);
+    memcpy(new, trig, sizeof(*trig));
+
+    /* add to global table of trigger */
+	list_add (&new->list, &trigger_list);
+    /* add and start timer if required */
+    timer_setup(&new->timeout, trigger_timeout, 0);
+    new->timeout.expires = jiffies + (TRIGGER_TIMEOUT * HZ);
+
+ 	write_unlock_bh(&ip_conntrack_lock);
+	return 0;
+}
+
+static inline int trigger_out_matched(const struct ipt_trigger *i,
+        const u_int16_t proto, const u_int16_t dport)
+{
+     DEBUGP("%s: i=%p, proto= %d, dport=%d.\n", __FUNCTION__, i, proto, dport);
+    DEBUGP("%s: Got one, mproto= %d, mport[0..1]=%d, %d.\n", __FUNCTION__,
+            i->mproto, i->ports.mport[0], i->ports.mport[1]);
+
+    return ((i->mproto == proto) && (i->ports.mport[0] <= dport)
+            && (i->ports.mport[1] >= dport));
+}
+
+static unsigned int
+trigger_out(struct sk_buff *skb,
+                unsigned int hooknum,
+                const struct net_device *in,
+                const struct net_device *out,
+                const void *targinfo)
+{
+    const struct ipt_trigger_info *info = targinfo;
+    struct ipt_trigger trig, *found;
+    const struct iphdr *iph = ip_hdr(skb);
+    struct tcphdr *tcph = (void *)iph + iph->ihl*4;     /* Might be TCP, UDP */
+
+    DEBUGP("############# %s ############\n", __FUNCTION__);
+    /* Check if the trigger range has already existed in 'trigger_list'. */
+	list_for_each_entry(found, &trigger_list, list){
+		if (trigger_out_matched(found, iph->protocol,ntohs(tcph->dest))) {
+        /* Yeah, it exists. We need to update(delay) the destroying timer. */
+        trigger_refresh(found, TRIGGER_TIMEOUT * HZ);
+        /* In order to allow multiple hosts use the same port range, we update
+           the 'saddr' after previous trigger has a reply connection. */
+        if (found->reply)
+            found->srcip = iph->saddr;
+		return XT_CONTINUE;        /* We don't block any packet. */
+		}
+	}
+	DEBUGP("############# %s ############  not found the entry\n", __FUNCTION__);
+		/* Create new trigger */
+		memset(&trig, 0, sizeof(trig));
+		trig.srcip = iph->saddr;
+		trig.mproto = iph->protocol;
+		trig.rproto = info->proto;
+		memcpy(&trig.ports, &info->ports, sizeof(struct ipt_trigger_ports));
+		add_new_trigger(&trig); /* Add the new 'trig' to list 'trigger_list'. */
+	return XT_CONTINUE;        /* We don't block any packet. */
+}
+
+static inline int trigger_in_matched(const struct ipt_trigger *i,
+        const u_int16_t proto, const u_int16_t dport)
+{
+    u_int16_t rproto = i->rproto;
+
+ DEBUGP("%s: i=%p, proto= %d, dport=%d.\n", __FUNCTION__, i, proto, dport);
+ DEBUGP("%s: Got one, rproto= %d, rport[0..1]=%d, %d.\n", __FUNCTION__,
+		i->rproto, i->ports.rport[0], i->ports.rport[1]);
+    if (!rproto)
+        rproto = proto;
+
+    return ((rproto == proto) && (i->ports.rport[0] <= dport)
+            && (i->ports.rport[1] >= dport));
+}
+
+static unsigned int
+trigger_in(struct sk_buff *skb,
+                unsigned int hooknum,
+                const struct net_device *in,
+                const struct net_device *out,
+                const void *targinfo)
+{
+    struct ipt_trigger *found;
+    const struct iphdr *iph = ip_hdr(skb);/*(skb)->nh.iph; */
+    struct tcphdr *tcph = (void *)iph + iph->ihl*4;     /* Might be TCP, UDP */
+    /* Check if the trigger-ed range has already existed in 'trigger_list'. */
+	list_for_each_entry(found, &trigger_list, list){
+	        if (trigger_in_matched(found, iph->protocol,ntohs(tcph->dest))) {
+        /* Yeah, it exists. We need to update(delay) the destroying timer. */
+        trigger_refresh(found, TRIGGER_TIMEOUT * HZ);
+        return NF_ACCEPT;       /* Accept it, or the imcoming packet could be
+                                   dropped in the FORWARD chain */
+		}
+	}
+    return XT_CONTINUE;        /* Our job is the interception. */
+}
+
+ #define NIPQUAD(addr) \
+        ((unsigned char *)&addr)[0], \
+        ((unsigned char *)&addr)[1], \
+        ((unsigned char *)&addr)[2], \
+        ((unsigned char *)&addr)[3]
+
+ #define NIPQUAD_FMT "%u.%u.%u.%u"
+static unsigned int
+trigger_dnat(struct sk_buff *skb,
+               unsigned int hooknum,
+                const struct net_device *in,
+                const struct net_device *out,
+                const void *targinfo)
+{
+    struct ipt_trigger *found;
+    const struct iphdr *iph = ip_hdr(skb);/*(skb)->nh.iph; */
+    struct tcphdr *tcph = (void *)iph + iph->ihl*4;     /* Might be TCP, UDP */
+    struct nf_conn *ct;
+    enum ip_conntrack_info ctinfo;
+    const struct nf_nat_ipv4_multi_range_compat *mr=targinfo;
+	struct nf_nat_ipv4_range newrange;
+    struct nf_nat_range2 range;
+
+    IP_NF_ASSERT(hooknum == NF_IP_PRE_ROUTING);
+    /* Check if the trigger-ed range has already existed in 'trigger_list'. */
+	list_for_each_entry(found, &trigger_list, list){
+		if (trigger_in_matched(found, iph->protocol,ntohs(tcph->dest))) {
+			if (!found->srcip)
+				return XT_CONTINUE;
+    found->reply = 1;   /* Confirm there has been a reply connection. */
+    ct = nf_ct_get(skb, &ctinfo);
+    IP_NF_ASSERT(ct && (ctinfo == IP_CT_NEW));
+
+    DEBUGP("%s: got ", __FUNCTION__);
+
+	/* Alter the destination of incoming packet. */
+ 	newrange= ((struct nf_nat_ipv4_range)
+		{ mr->range[0].flags | NF_NAT_RANGE_MAP_IPS,
+		  found->srcip, found->srcip,
+		  mr->range[0].min, mr->range[0].max });
+    DEBUGP("%s: found->srcip " NIPQUAD_FMT, __FUNCTION__, NIPQUAD(found->srcip));
+    /* nf_nat convert range */
+    memset(&range.min_addr, 0, sizeof(range.min_addr));
+    memset(&range.max_addr, 0, sizeof(range.max_addr));
+    range.flags = newrange.flags;
+    range.min_addr.ip = newrange.min_ip;
+    range.max_addr.ip = newrange.max_ip;
+    range.min_proto   = newrange.min;
+    range.max_proto   = newrange.max;
+    /* Hand modified range to generic setup. */
+	return nf_nat_setup_info(ct, &range,  HOOK2MANIP(hooknum));
+		}
+	}
+
+	return XT_CONTINUE;    /* We don't block any packet. */
+}
+
+static int trigger_tg_check(const struct xt_tgchk_param *par)
+{
+        const struct ipt_trigger_info *info = (struct ipt_trigger_info*)par->targinfo;
+        struct list_head *cur_item, *tmp_item;
+		const char *tablename = par->table;
+		unsigned int hook_mask = par->hook_mask;
+
+
+        if ((strcmp(tablename, "mangle") == 0)) {
+                DEBUGP("trigger_check: bad table `%s'.\n", tablename);
+                return -EINVAL;
+        }
+        if (hook_mask & ~((1 << NF_INET_PRE_ROUTING) | (1 << NF_INET_FORWARD))) {
+                DEBUGP("trigger_check: bad hooks %x.\n", hook_mask);
+                return -EINVAL;
+        }
+        if (info->proto) {
+            if (info->proto != IPPROTO_TCP && info->proto != IPPROTO_UDP) {
+                DEBUGP("trigger_check: bad proto %d.\n", info->proto);
+                return -EINVAL;
+            }
+        }
+        if (info->type == IPT_TRIGGER_OUT) {
+            if (!info->ports.mport[0] || !info->ports.rport[0]) {
+                DEBUGP("trigger_check: Try 'iptbles -j TRIGGER -h' for help.\n");
+               return -EINVAL;
+            }
+        }
+        /* Empty the 'trigger_list' */
+        list_for_each_safe(cur_item, tmp_item, &trigger_list) {
+            struct ipt_trigger *trig = (void *)cur_item;
+
+            DEBUGP("%s: list_for_each_safe(): %p.\n", __FUNCTION__, trig);
+            del_timer(&trig->timeout);
+            __del_trigger(trig);
+        }
+        return 0;
+}
+
+static unsigned int
+trigger_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+    const void *targinfo = par->targinfo;
+    const struct ipt_trigger_info *info = (struct ipt_trigger_info *)targinfo;
+    const struct iphdr *iph = /*(skb)->nh.iph;*/ip_hdr(skb);
+    const struct net_device *in = par->state->in;
+    const struct net_device *out = par->state->out;
+    unsigned int hooknum = par->state->hook;
+    /*DEBUGP("%s: type = %s\n", __FUNCTION__,
+            (info->type == IPT_TRIGGER_DNAT) ? "dnat" :
+            (info->type == IPT_TRIGGER_IN) ? "in" : "out"); */
+
+    /* The Port-trigger only supports TCP and UDP. */
+    if ((iph->protocol != IPPROTO_TCP) && (iph->protocol != IPPROTO_UDP))
+        return XT_CONTINUE;
+    if (info->type == IPT_TRIGGER_OUT)
+        return trigger_out(skb, hooknum, in, out, targinfo);
+    else if (info->type == IPT_TRIGGER_IN)
+        return trigger_in(skb, hooknum, in, out, targinfo);
+    else if (info->type == IPT_TRIGGER_DNAT)
+        return trigger_dnat(skb, hooknum, in, out, targinfo);
+    return XT_CONTINUE;
+}
+
+static struct xt_target trigger_tg_reg __read_mostly = {
+	.name		= "TRIGGER",
+	.family		= NFPROTO_IPV4,
+	.target		= trigger_tg,
+	.targetsize	= sizeof(struct ipt_trigger_info),
+	.checkentry	= trigger_tg_check,
+	.me		= THIS_MODULE,
+};
+
+static int __init trigger_tg_init(void)
+{
+	return xt_register_target(&trigger_tg_reg);
+}
+
+static void __exit trigger_tg_exit(void)
+{
+	xt_unregister_target(&trigger_tg_reg);
+}
+
+module_init(trigger_tg_init);
+module_exit(trigger_tg_exit);
