Index: linux-5.4.171/net/ipv4/ip_gre.c
===================================================================
--- linux-5.4.171.orig/net/ipv4/ip_gre.c
+++ linux-5.4.171/net/ipv4/ip_gre.c
@@ -45,6 +45,11 @@
 #include <net/dst_metadata.h>
 #include <net/erspan.h>
 
+#ifdef ZCFG_USED
+#include <linux/if_vlan.h>
+#include <net/tcp.h>
+#endif
+
 /*
    Problems & solutions
    --------------------
@@ -116,6 +121,66 @@ static unsigned int ipgre_net_id __read_
 static unsigned int gre_tap_net_id __read_mostly;
 static unsigned int erspan_net_id __read_mostly;
 
+#ifdef ZCFG_USED
+static u32 gre_set_tcp_mss(struct sk_buff *skb, u16 mtu)
+{
+    struct iphdr *ip_h = NULL;
+    struct tcphdr *tcp_h = NULL;
+    u32 optlen = 0;
+    u32 i = 0;
+    u16 newmss = 0;
+    //u16 oldmss = 0;
+    u8 *opt = NULL;
+
+    ip_h = ip_hdr(skb);
+    if(ip_h->version != 4 || ip_h->protocol != IPPROTO_TCP)
+        return 0;
+
+    tcp_h = (struct tcphdr *)(skb_network_header(skb) + (ip_h->ihl*4));
+
+    /* TCP SYN */
+    if(tcp_h != NULL && tcp_h->syn) {
+        /* Malformed or no option field */
+        if((tcp_h->doff*4) <= sizeof(struct tcphdr))
+            return 0;
+
+        /* find MSS value */
+        opt = ((u8*)tcp_h + sizeof(struct tcphdr));
+        optlen = (tcp_h->doff*4) - sizeof(struct tcphdr);
+        for(i = 0; i < optlen; ) {
+            if(opt[i] == TCPOPT_MSS && (optlen - i) >= TCPOLEN_MSS && opt[i+1] == TCPOLEN_MSS) {
+                u16 mssval = 0;
+
+                //oldmss = (opt[i+3] << 8) | opt[i+2];
+                mssval = (opt[i+2] << 8) | opt[i+3];
+
+                // MTU - (iphdr + tcphdr)
+                if(mssval > (mtu - 40))
+                    newmss = mtu - 40;
+                else
+                    break;
+
+                //mss = &newmss;
+                opt[i+2] = (newmss & 0xFF00) >> 8;
+                opt[i+3] = newmss & 0xFF;
+
+                // recalculate checksum
+                inet_proto_csum_replace2(&tcp_h->check, skb, htons(mssval), htons(newmss), 0);
+
+                mssval = (opt[i+2] << 8) | opt[i+3];
+                break;
+            }
+            if (opt[i] < 2)
+                i++;
+            else
+                i += opt[i+1] ? : 1;
+        }
+    }
+
+    return 0;
+}
+#endif
+
 static int ipgre_err(struct sk_buff *skb, u32 info,
 		     const struct tnl_ptk_info *tpi)
 {
@@ -436,6 +501,11 @@ static void __gre_xmit(struct sk_buff *s
 	if (tunnel->parms.o_flags & TUNNEL_SEQ)
 		tunnel->o_seqno++;
 
+#ifdef ZCFG_USED
+	/* Parse skb and update TCP SYN MSS value */
+    gre_set_tcp_mss(skb, dev->mtu);
+#endif
+
 	/* Push GRE header. */
 	gre_build_header(skb, tunnel->tun_hlen,
 			 tunnel->parms.o_flags, proto, tunnel->parms.o_key,
