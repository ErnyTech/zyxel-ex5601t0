Index: linux-5.4.171/net/netfilter/nf_conntrack_core.c
===================================================================
--- linux-5.4.171.orig/net/netfilter/nf_conntrack_core.c
+++ linux-5.4.171/net/netfilter/nf_conntrack_core.c
@@ -55,6 +55,29 @@
 
 #include "nf_internals.h"
 
+/* Altibox has a CA system that is used to handle entitlements for STB.
+   The STB is always talking to STB on destination port 1600 and will
+   start a new connection to CA server every 600 seconds. The CA server
+   is also used to notify STB of other events (like request to reboot etc) */
+#define PROC_STB_PORT	"zy_nf_ct_udp_STB_port"
+#define PROC_STB_TIMEOUT	"zy_nf_ct_udp_STB_timeout"
+uint32_t nf_ct_udp_STB_timeout __read_mostly;
+uint32_t nf_ct_udp_STB_port __read_mostly;
+EXPORT_SYMBOL(nf_ct_udp_STB_port);
+EXPORT_SYMBOL(nf_ct_udp_STB_timeout);
+
+
+static ssize_t proc_STB_timeout_read(struct file * file, char * buffer, size_t len, loff_t *offset);
+static ssize_t proc_STB_timeout_write(struct file *file, const char *buf, size_t count, loff_t *offset);
+static ssize_t proc_STB_port_read(struct file * file, char * buffer, size_t len, loff_t *offset);
+static ssize_t proc_STB_port_write(struct file *file, const char *buf, size_t count, loff_t *offset);
+
+
+int Zy_UDP_init_proc(void);
+void Zy_UDP_deinit_proc(void);
+
+
+
 __cacheline_aligned_in_smp spinlock_t nf_conntrack_locks[CONNTRACK_LOCKS];
 EXPORT_SYMBOL_GPL(nf_conntrack_locks);
 
@@ -2500,6 +2523,8 @@ i_see_dead_people:
 		goto i_see_dead_people;
 	}
 
+	Zy_UDP_deinit_proc();
+
 	list_for_each_entry(net, net_exit_list, exit_list) {
 		nf_conntrack_proto_pernet_fini(net);
 		nf_conntrack_ecache_pernet_fini(net);
@@ -2823,11 +2848,17 @@ int nf_conntrack_init_net(struct net *ne
 	nf_conntrack_helper_pernet_init(net);
 	nf_conntrack_proto_pernet_init(net);
 
+	ret = Zy_UDP_init_proc();
+	if (ret < 0)
+		goto err_proto_zy_udp;
+
 #ifdef CONFIG_ZYXEL_NF_SESSION_CTL//__ZYXEL__, Chi-Hsiang /proc/net/nf_session_ctl
 	 net->ct.session_control_table = nf_ct_alloc_hashtable(&nf_conntrack_htable_size, 1);
 #endif
 	return 0;
 
+err_proto_zy_udp:
+	 Zy_UDP_deinit_proc();
 err_expect:
 	free_percpu(net->ct.stat);
 err_pcpu_lists:
@@ -2835,3 +2866,100 @@ err_pcpu_lists:
 err_stat:
 	return ret;
 }
+
+
+static ssize_t proc_STB_timeout_read(struct file * file, char * buffer, size_t len, loff_t *offset)
+{
+    ssize_t ret=0;
+    if(*offset == 0)
+    {
+        (*offset) = snprintf(buffer, sizeof(buffer), "%d", nf_ct_udp_STB_timeout );
+        if(likely(*offset != 0))
+            ret=*offset;
+    }
+    return ret;
+}
+
+static ssize_t proc_STB_timeout_write(struct file *file, const char *buf, size_t count, loff_t *offset)
+{
+	char local_buf[20];
+	int len;
+
+	len = sizeof(local_buf) < count ? sizeof(local_buf) - 1 : count;
+	len = len - copy_from_user(local_buf, buf, len);
+	local_buf[len] = 0;
+	sscanf(local_buf,"%d",&nf_ct_udp_STB_timeout);
+
+    return len;
+}
+
+static ssize_t proc_STB_port_read(struct file * file, char * buffer, size_t len, loff_t *offset)
+{
+	ssize_t ret=0;
+    if(*offset == 0)
+    {
+        (*offset) = sprintf(buffer, "%d", nf_ct_udp_STB_port );
+        if(likely(*offset != 0))
+            ret=*offset;
+    }
+    return ret;
+}
+
+static ssize_t proc_STB_port_write(struct file *file, const char *buf, size_t count, loff_t *offset)
+{
+	char local_buf[20];
+	int len;
+
+	len = sizeof(local_buf) < count ? sizeof(local_buf) - 1 : count;
+	len = len - copy_from_user(local_buf, buf, len);
+	local_buf[len] = 0;
+
+	sscanf(local_buf,"%d",&nf_ct_udp_STB_port);
+
+    return len;
+}
+
+static struct file_operations zyudp_stbtimeout_proc_fops = {
+	 .owner	 = THIS_MODULE,
+	 .read    = proc_STB_timeout_read,
+	 .write   = proc_STB_timeout_write,
+};
+
+static struct file_operations zyudp_stbport_proc_fops = {
+	 .owner	 = THIS_MODULE,
+	 .read    = proc_STB_port_read,
+	 .write   = proc_STB_port_write,
+};
+
+
+int Zy_UDP_init_proc(void)
+{
+	struct proc_dir_entry *proc_zy_nf_ct_udp_STB_port, *proc_zy_nf_ct_udp_STB_timeout;
+
+	//STB port part
+	proc_zy_nf_ct_udp_STB_port = proc_create(PROC_STB_PORT, 0644, NULL, &zyudp_stbport_proc_fops);
+	if (proc_zy_nf_ct_udp_STB_port == NULL) {
+		printk(KERN_ALERT "Error: Could not initialize /proc/%s\n", PROC_STB_PORT);
+		// return -ENOMEM;
+		return -1;
+	}
+	printk(KERN_INFO "/proc/%s created\n", PROC_STB_PORT);
+	//STB timeout part
+	proc_zy_nf_ct_udp_STB_timeout = proc_create(PROC_STB_TIMEOUT, 0644, NULL, &zyudp_stbtimeout_proc_fops);
+	if (proc_zy_nf_ct_udp_STB_timeout == NULL){
+		printk(KERN_ALERT "Error: Could not initialize /proc/%s\n", PROC_STB_TIMEOUT);
+		// return -ENOMEM;
+		return -1;
+	}
+	printk(KERN_INFO "/proc/%s created\n", PROC_STB_TIMEOUT);
+	return 0;	/* everything is ok */
+}
+
+void  Zy_UDP_deinit_proc(void)
+{
+	remove_proc_entry(PROC_STB_TIMEOUT, NULL);
+	printk(KERN_INFO "/proc/%s remove\n", PROC_STB_TIMEOUT);
+	remove_proc_entry(PROC_STB_PORT, NULL);
+	printk(KERN_INFO "/proc/%s remove\n", PROC_STB_PORT);
+}
+
Index: linux-5.4.171/net/netfilter/nf_conntrack_proto_udp.c
===================================================================
--- linux-5.4.171.orig/net/netfilter/nf_conntrack_proto_udp.c
+++ linux-5.4.171/net/netfilter/nf_conntrack_proto_udp.c
@@ -24,6 +24,9 @@
 #include <net/netfilter/ipv4/nf_conntrack_ipv4.h>
 #include <net/netfilter/ipv6/nf_conntrack_ipv6.h>
 
+/* Altibox: Customized UDP timeout*/
+extern uint32_t nf_ct_udp_STB_timeout __read_mostly;
+extern uint32_t nf_ct_udp_STB_port __read_mostly;
 static const unsigned int udp_timeouts[UDP_CT_MAX] = {
 	[UDP_CT_UNREPLIED]	= 30*HZ,
 	[UDP_CT_REPLIED]	= 120*HZ,
@@ -89,10 +92,28 @@ int nf_conntrack_udp_packet(struct nf_co
 			    const struct nf_hook_state *state)
 {
 	unsigned int *timeouts;
+	const struct udphdr *hp;
+	struct udphdr _hdr;
+	int mFlag = 0;
 
 	if (udp_error(skb, dataoff, state))
 		return -NF_ACCEPT;
 
+	//parse UDP header
+	/* Actually only need first 8 bytes. */
+	hp = skb_header_pointer(skb, dataoff, sizeof(_hdr), &_hdr);
+	if (hp != NULL)
+	{
+		//if match the dest. port, set flag
+		if (( hp->source == htons(nf_ct_udp_STB_port)) || ( hp->dest == htons(nf_ct_udp_STB_port)))
+		{
+			mFlag=1;
+			// printk(">>> STB mFlag=1  sport=%d dport=%d <<<\n", hp->source, hp->dest);
+		} else {
+			//printk(">>>  UDP sport=%d dport=%d <<<\n", hp->source, hp->dest);
+		}
+	}
+
 	timeouts = nf_ct_timeout_lookup(ct);
 	if (!timeouts)
 		timeouts = udp_get_timeouts(nf_ct_net(ct));
@@ -113,14 +134,13 @@ int nf_conntrack_udp_packet(struct nf_co
 			stream = true;
 		}
 
-		nf_ct_refresh_acct(ct, ctinfo, skb, extra);
+		nf_ct_refresh_acct(ct, ctinfo, skb, (mFlag)? (nf_ct_udp_STB_timeout*HZ) : extra);
 
 		/* Also, more likely to be important, and not a probe */
 		if (stream && !test_and_set_bit(IPS_ASSURED_BIT, &ct->status))
 			nf_conntrack_event_cache(IPCT_ASSURED, ct);
 	} else {
-		nf_ct_refresh_acct(ct, ctinfo, skb,
-				   timeouts[UDP_CT_UNREPLIED]);
+		nf_ct_refresh_acct(ct, ctinfo, skb, (mFlag)? (nf_ct_udp_STB_timeout*HZ) : timeouts[UDP_CT_UNREPLIED]);
 	}
 	return NF_ACCEPT;
 }
